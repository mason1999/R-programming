source("~/Desktop/R-programming/R-projects/revision/4-base-r.R", echo=TRUE)
#---- Section 1----
library(gapminder)
gapminder
#---- Section 1----
library(gapminder)
gapminder[1, ] # first row
gapminder[1:3, 1:4]
gapminder$continent # take the continent column
gapminder[gapminder$year == 1952, ] # gapminder$year returns a vector and we're doing a logical test
gapminder[gapminder$year == 1952, ] # gapminder$year returns a vector and we're doing a logical test
#---- Section 1----
library(gapminder)
gapminder[1, ] # first row
gapminder[1:3, 1:4]
gapminder$continent # take the continent column
gapminder[gapminder$year == 1952, ] # gapminder$year returns a vector and we're doing a logical test
head(gapminder$year == 1952, 50) # find first 50 values of the logical vector
#---- Section 1----
library(gapminder)
gapminder[1, ] # first row
gapminder[1:3, 1:4]
gapminder$continent # take the continent column
gapminder[gapminder$year == 1952, ] # gapminder$year returns a vector and we're doing a logical test
head(gapminder$year == 1952, 50) # find first 50 values of the logical vector
# missing values
w = c(1, 2, NA, 4, 5, 6, NA)
mean(w)
mean(w, na.rm = TRUE)
#---- Section 1----
library(gapminder)
gapminder[1, ] # first row
gapminder[1:3, 1:4]
gapminder$continent # take the continent column
gapminder[gapminder$year == 1952, ] # gapminder$year returns a vector and we're doing a logical test
head(gapminder$year == 1952, 50) # find first 50 values of the logical vector
# missing values
w = c(1, 2, NA, 4, 5, 6, NA)
mean(w)
mean(w, na.rm = TRUE)
mean(w[!is.na(w)]) # does same thing as above
#---- Section 1----
library(gapminder)
gapminder[1, ] # first row
gapminder[1:3, 1:4]
gapminder$continent # take the continent column
gapminder[gapminder$year == 1952, ] # gapminder$year returns a vector and we're doing a logical test
head(gapminder$year == 1952, 50) # find first 50 values of the logical vector
# missing values
w = c(1, 2, NA, 4, 5, 6, NA)
mean(w)
mean(w, na.rm = TRUE)
mean(w[!is.na(w)]) # does same thing as above. ! reverse the is.na function
# multiple conditions
gapminder[gapminder$country == "Oman" & gapminder$year > 1980 & gapminder$year <= 2000, ]
# %in% : returns true as long as any values in the vector are in the one we are testing against
former_yugoslavia = c("Bosnia and Herzegovina", "Croatia", "Macedonia", "Montenegro", "Serbia", "Slovenia")
#---- Section 1----
library(gapminder)
gapminder[1, ] # first row
gapminder[1:3, 1:4]
gapminder$continent # take the continent column
gapminder[gapminder$year == 1952, ] # gapminder$year returns a vector and we're doing a logical test
head(gapminder$year == 1952, 50) # find first 50 values of the logical vector
# missing values
w = c(1, 2, NA, 4, 5, 6, NA)
mean(w)
mean(w, na.rm = TRUE)
mean(w[!is.na(w)]) # does same thing as above. ! reverse the is.na function
# multiple conditions
gapminder[gapminder$country == "Oman" & gapminder$year > 1980 & gapminder$year <= 2000, ]
# %in% : returns true as long as any values in the vector are in the one we are testing against
former_yugoslavia = c("Bosnia and Herzegovina", "Croatia", "Macedonia", "Montenegro", "Serbia", "Slovenia")
yugoslavia = gapminder[gapminder$country %in% former_yugoslavia, ]
yugoslavia
# Create new columns
yugoslavia$pop_million = yugoslavia$pop/1000000
yugoslavia
#---- Section 1----
library(gapminder)
gapminder[1, ] # first row
gapminder[1:3, 1:4]
gapminder$continent # take the continent column
gapminder[gapminder$year == 1952, ] # gapminder$year returns a vector and we're doing a logical test
head(gapminder$year == 1952, 50) # find first 50 values of the logical vector
# missing values
w = c(1, 2, NA, 4, 5, 6, NA)
mean(w)
mean(w, na.rm = TRUE)
mean(w[!is.na(w)]) # does same thing as above. ! reverse the is.na function
# multiple conditions
gapminder[gapminder$country == "Oman" & gapminder$year > 1980 & gapminder$year <= 2000, ]
# %in% : returns true as long as any values in the vector are in the one we are testing against
former_yugoslavia = c("Bosnia and Herzegovina", "Croatia", "Macedonia", "Montenegro", "Serbia", "Slovenia")
yugoslavia = gapminder[gapminder$country %in% former_yugoslavia, ]
# Create new columns with the $ options too
yugoslavia$pop_million = yugoslavia$pop/1000000
yugoslavia$life_exp_past_40 = yugoslavia$lifeExp - 40
yugoslavia
#---- Section 1----
library(gapminder)
gapminder[1, ] # first row
gapminder[1:3, 1:4]
gapminder$continent # take the continent column
gapminder[gapminder$year == 1952, ] # gapminder$year returns a vector and we're doing a logical test
head(gapminder$year == 1952, 50) # find first 50 values of the logical vector
# missing values
w = c(1, 2, NA, 4, 5, 6, NA)
mean(w)
mean(w, na.rm = TRUE)
mean(w[!is.na(w)]) # does same thing as above. ! reverse the is.na function
# multiple conditions
gapminder[gapminder$country == "Oman" & gapminder$year > 1980 & gapminder$year <= 2000, ]
# %in% : returns true as long as any values in the vector are in the one we are testing against
former_yugoslavia = c("Bosnia and Herzegovina", "Croatia", "Macedonia", "Montenegro", "Serbia", "Slovenia")
yugoslavia = gapminder[gapminder$country %in% former_yugoslavia, ]
# Create new columns with the $ options too
yugoslavia$pop_million = yugoslavia$pop/1000000
yugoslavia$life_exp_past_40 = yugoslavia$lifeExp - 40
head(yugoslavia, 5)
#---- Section 1----
library(gapminder)
gapminder[1, ] # first row
gapminder[1:3, 1:4]
gapminder$continent # take the continent column
gapminder[gapminder$year == 1952, ] # gapminder$year returns a vector and we're doing a logical test
head(gapminder$year == 1952, 50) # find first 50 values of the logical vector
# missing values
w = c(1, 2, NA, 4, 5, 6, NA)
mean(w)
mean(w, na.rm = TRUE)
mean(w[!is.na(w)]) # does same thing as above. ! reverse the is.na function
# multiple conditions
gapminder[gapminder$country == "Oman" & gapminder$year > 1980 & gapminder$year <= 2000, ]
# %in% : returns true as long as any values in the vector are in the one we are testing against
former_yugoslavia = c("Bosnia and Herzegovina", "Croatia", "Macedonia", "Montenegro", "Serbia", "Slovenia")
yugoslavia = gapminder[gapminder$country %in% former_yugoslavia, ]
# Create new columns with the $ options too
yugoslavia$pop_million = yugoslavia$pop/1000000
yugoslavia$life_exp_past_40 = yugoslavia$lifeExp - 40
head(yugoslavia, 5)
# ifelse()==> ifelse(test = x>= y, yes = 1, no = 2)
# replace "Bosnia and Herzegovina" with "B and H"
yugoslavia$short_country = ifelse(yugoslavia$country == "Bosnia and Herzegovina",
"B and H",
as.character(yugoslavia$country))
#---- Section 1----
library(gapminder)
gapminder[1, ] # first row
gapminder[1:3, 1:4]
gapminder$continent # take the continent column
gapminder[gapminder$year == 1952, ] # gapminder$year returns a vector and we're doing a logical test
head(gapminder$year == 1952, 50) # find first 50 values of the logical vector
# missing values
w = c(1, 2, NA, 4, 5, 6, NA)
mean(w)
mean(w, na.rm = TRUE)
mean(w[!is.na(w)]) # does same thing as above. ! reverse the is.na function
# multiple conditions
gapminder[gapminder$country == "Oman" & gapminder$year > 1980 & gapminder$year <= 2000, ]
# %in% : returns true as long as any values in the vector are in the one we are testing against
former_yugoslavia = c("Bosnia and Herzegovina", "Croatia", "Macedonia", "Montenegro", "Serbia", "Slovenia")
yugoslavia = gapminder[gapminder$country %in% former_yugoslavia, ]
# Create new columns with the $ options too
yugoslavia$pop_million = yugoslavia$pop/1000000
yugoslavia$life_exp_past_40 = yugoslavia$lifeExp - 40
head(yugoslavia, 5)
# ifelse()==> ifelse(test = x>= y, yes = 1, no = 2)
# replace "Bosnia and Herzegovina" with "B and H"
yugoslavia$short_country = ifelse(yugoslavia$country == "Bosnia and Herzegovina",
"B and H",
as.character(yugoslavia$country))
head(yugoslavia, 5)
ifelse(c(TRUE, TRUE), "B and H", c(1, 2, 3, 4, 5))
ifelse(c(TRUE, FALSE), "B and H", c(1, 2, 3, 4, 5))
ifelse(c(TRUE, FALSE), "B and H", gapminder)
# Repeats items in set
x9 = rep(c(TRUE, FALSE), each = 5)
x9
# Does same as above
x10 = c(rep(TRUE, 5), rep(FALSE, 5))
x10
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) {
install.packages("pacman")
}
# Use pacman to load add-on packages as desired. the rio package is pretty good
# because it stands for "R-input-output"
pacman::p_load(pacman, rio)
# From the official R documentation
browseURL("http://j.mp/2aFZUrJ")
# CSV
rio_csv <- import("~/Desktop/mbb.csv")
# CSV
rio_csv <- import("./data_sets_for_lesson13/mbb.csv")
head(rio_csv)
# TXT
rio_txt <- import("./data_sets_for_lesson13/mbb.txt")
head(rio_txt)
# Excel XLSX
rio_xlsx <- import("./data_sets_for_lesson13/mbb.xlsx")
head(rio_xlsx)
?View
View(rio_csv)
View(rio_txt)
View(rio_txt)
View(rio_txt)
# boxplots
oral_contraceptive = scan("http://maths.usyd.edu.au/math1905/r/OC.txt")
users = oral_contraceptive[1:10]
non_users = oral_contraceptive[-1 * 1:10]
labels = c("Users", "Non users")
boxplot(users, non_users)
# ---- Continuous data summaries ----
male_heights = scan("http://maths.usyd.edu.au/math1905/r/GS9m.txt")
female_heights = scan("http://maths.usyd.edu.au/math1905/r/GS9f.txt")
heights = c(male_heights, female_heights)
# stem and leaf plot. scale = 2 doubles the number of rows. Note that scale = 5
# pushes the decimal point to the "|"
stem(heights)
stem(heights, scale = 2)
stem(heights, scale = 3)
stem(heights, scale = 4)
stem(heights, scale = 5)
# Histograms
my_breaks = seq(from = 87.5, to = 225.5, by = 15)
hist(heights, my_breaks)
# Relative frequency histograms: Area under the histogram is 1
hist(x = heights, breaks = my_breaks, probability = TRUE)
# By Default, bins include their RIGHT endpoing in R. This is true unless we
# specify the "right = FALSE" parameter. We expect the histogram to have frequency
# |II|III|I| by default
my_data = 1:6
my_breaks = c(0, 2.5, 5, 7.5)
# Parameter --> "Multiple figures by row"
par(mfrow = c(1, 3))
hist(x = my_data, breaks = my_breaks)
hist(x = my_data, breaks = my_breaks, right = TRUE)
hist(x = my_data, breaks = my_breaks, right = FALSE)
hist(x = my_data, breaks = my_breaks, right = FALSE, ylim = c(0, 3))
# boxplots
oral_contraceptive = scan("http://maths.usyd.edu.au/math1905/r/OC.txt")
users = oral_contraceptive[1:10]
non_users = oral_contraceptive[-1 * 1:10]
labels = c("Users", "Non users")
boxplot(users, non_users, horizontal = TRUE)
# ---- Continuous data summaries ----
male_heights = scan("http://maths.usyd.edu.au/math1905/r/GS9m.txt")
female_heights = scan("http://maths.usyd.edu.au/math1905/r/GS9f.txt")
heights = c(male_heights, female_heights)
# stem and leaf plot. scale = 2 doubles the number of rows. Note that scale = 5
# pushes the decimal point to the "|"
stem(heights)
stem(heights, scale = 2)
stem(heights, scale = 3)
stem(heights, scale = 4)
stem(heights, scale = 5)
# Histograms
my_breaks = seq(from = 87.5, to = 225.5, by = 15)
hist(heights, my_breaks)
# Relative frequency histograms: Area under the histogram is 1
hist(x = heights, breaks = my_breaks, probability = TRUE)
# By Default, bins include their RIGHT endpoing in R. This is true unless we
# specify the "right = FALSE" parameter. We expect the histogram to have frequency
# |II|III|I| by default
my_data = 1:6
my_breaks = c(0, 2.5, 5, 7.5)
# Parameter --> "Multiple figures by row"
par(mfrow = c(1, 3))
hist(x = my_data, breaks = my_breaks)
hist(x = my_data, breaks = my_breaks, right = TRUE)
hist(x = my_data, breaks = my_breaks, right = FALSE)
hist(x = my_data, breaks = my_breaks, right = FALSE, ylim = c(0, 3))
# boxplots
par(mfrow = c(1, 1))
oral_contraceptive = scan("http://maths.usyd.edu.au/math1905/r/OC.txt")
users = oral_contraceptive[1:10]
non_users = oral_contraceptive[-1 * 1:10]
labels = c("Users", "Non users")
boxplot(users, non_users, horizontal = TRUE)
boxplot(users, non_users, horizontal = TRUE, names = labels)
# ---- Calculating the mean ----
my_data = scan("http://maths.usyd.edu.au/math1905/r/PQdataset1.txt")
# ---- Calculating the mean ----
my_data = scan("http://maths.usyd.edu.au/math1905/r/PQdataset1.txt")
mean(my_data)
mean(my_data)
# ---- Calculating the mean ----
my_data = scan("http://maths.usyd.edu.au/math1905/r/PQdataset1.txt")
##### Direct calculation
freq_table = table(my_data)
mean(my_data)
freq_table = table(my_data)
mean(my_data)
(freq_table = table(my_data))
mean(my_data)
freq_table = table(my_data)
values = 1:12
(calculated_mean = sum(freq_table * values)/sum(freq_table))
mean(my_data)
prices=scan("http://www.maths.usyd.edu.au/math1905/r/prices.txt")
hist(prices)
hist(prices, n = 25)
boxplot(prices, horizontal = TRUE)
prices
sort(prices)
describe(prices)
sort(prices)
p_load(pacman, psych)
prices = scan("http://www.maths.usyd.edu.au/math1905/r/prices.txt")
hist(prices, n = 25)
boxplot(prices, horizontal = TRUE)
describe(prices)
sort(prices)
?fivenum
fivenum(prices)
sort(prices)
hist(prices, n = 25)
boxplot(prices, horizontal = TRUE)
fivenum(prices)
hist(prices, n = 25)
boxplot(prices, horizontal = TRUE)
rug(prices, lwd = 2, col = "gray")
fivenum(prices)
fivenum(prices)[4] - fivenum(prices)[2] * 1.5
?abline
boxplot(prices, horizontal = TRUE)
rug(prices, lwd = 2, col = "gray")
abline(v = fivenum(prices)[2], col = "red")
abline(v = fivenum(prices)[4], col = "red")
fivenum(prices)
rug(prices, lwd = 2, col = "gray")
abline(v = q1, col = "red") # Q1
abline(v = q3, col = "red") # Q3
abline(v = min, col = "blue") # minimum
abline(v = q3 + 1.5 * IQR, col = "purple") # Q3 + 1.5 * IQR
fivenum(prices)
q1 = fivenum(prices)[2]
q2 = fivenum(prices)[3]
q3 = fivenum(prices)[4]
max = fivenum(prices)[5]
IQR = q3 - q1
boxplot(prices, horizontal = TRUE)
rug(prices, lwd = 2, col = "gray")
abline(v = q1, col = "red") # Q1
abline(v = q3, col = "red") # Q3
abline(v = min, col = "blue") # minimum
abline(v = q3 + 1.5 * IQR, col = "purple") # Q3 + 1.5 * IQR
fivenum(prices)
min = fivenum(prices)[1]
q1 = fivenum(prices)[2]
q2 = fivenum(prices)[3]
q3 = fivenum(prices)[4]
max = fivenum(prices)[5]
IQR = q3 - q1
boxplot(prices, horizontal = TRUE)
rug(prices, lwd = 2, col = "gray")
abline(v = q1, col = "red") # Q1
abline(v = q3, col = "red") # Q3
abline(v = min, col = "blue") # minimum
abline(v = q3 + 1.5 * IQR, col = "purple") # Q3 + 1.5 * IQR
fivenum(prices)
abline(v = max, col = "green")
mean(prices)
median(prices)
prices_without_largest = prices[-1 * length(prices)]
# change in mean
(mean(prices_without_largest) - mean(prices))/mean(prices)
# change in meadian
(median(prices_without_largest) - median(prices))/median(prices)
rel_change_mean/rel_change_median
######################### mean vs median when we remove the largest observation
prices_without_largest = prices[-1 * length(prices)]
# change in mean
rel_change_mean = (mean(prices_without_largest) - mean(prices))/mean(prices)
# change in meadian
rel_change_median = (median(prices_without_largest) - median(prices))/median(prices)
# observe:
rel_change_mean/rel_change_median
# ---- Comparing mean and median ----
p_load(pacman, psych)
prices = scan("http://www.maths.usyd.edu.au/math1905/r/prices.txt")
# The histogram seems to indicate a right skew to the data
hist(prices, n = 25)
# We draw a boxplot for the data
# red lines indicate Q1 and Q3
# blue line indicates minimum
# purple line indicates 1.5 * IQR + Q3
min = fivenum(prices)[1]
q1 = fivenum(prices)[2]
q2 = fivenum(prices)[3]
q3 = fivenum(prices)[4]
max = fivenum(prices)[5]
IQR = q3 - q1
boxplot(prices, horizontal = TRUE)
rug(prices, lwd = 2, col = "gray")
abline(v = q1, col = "red") # Q1
abline(v = q3, col = "red") # Q3
abline(v = min, col = "blue") # minimum
abline(v = q3 + 1.5 * IQR, col = "purple") # Q3 + 1.5 * IQR
abline(v = max, col = "green")
######################### mean vs median
mean(prices)
median(prices)
######################### mean vs median when we remove the largest observation
prices_without_largest = prices[-1 * length(prices)]
# change in mean
rel_change_mean = (mean(prices_without_largest) - mean(prices))/mean(prices)
# change in meadian
rel_change_median = (median(prices_without_largest) - median(prices))/median(prices)
# observe:
rel_change_median/rel_change_mean
mean(prices_without_largest)
length(prices)
prices_without_largest = sort(prices)[-1 * length(prices)]
# change in mean
rel_change_mean = (mean(prices_without_largest) - mean(prices))/mean(prices)
# change in meadian
rel_change_median = (median(prices_without_largest) - median(prices))/median(prices)
# observe:
rel_change_median/rel_change_mean
rel_change_mean/rel_change_median
