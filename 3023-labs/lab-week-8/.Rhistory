}
norm.var.umpu(0.04, 5)
# Chunk 7
# significane level
alpha = 0.04
# degrees of freedom
n = 5
# sigma squared values
sig.sq=(50:150)/100
# for the two tailed test (use a and b from before):
power.rej = pchisq(q = a/sig.sq, df = n - 1, lower.tail = TRUE) +
pchisq(q = b/sig.sq, df = n - 1, lower.tail = FALSE)
plot(sig.sq, power.rej, type = "l", main = "comparing tests",
xlab = "sigma squared", ylab = "power")
abline(h = 0.04, lty = 2)
abline(v = 1, col = "red")
# for the UMPU test:
# 1. find the values of c and d according to alpha = 0.04 and n = 5
umpu = norm.var.umpu(alpha,n)
# 2. find the power of the umpu test for each theta value:
umpu.power = pchisq(umpu$c/sig.sq, df = n - 1) +
pchisq(umpu$d/sig.sq, df = n - 1, lower.tail = FALSE)
# 3. plot
lines(sig.sq, umpu.power, col = "blue")
# legend
legend("top", legend = c("Power of equal-tailed test", "power of UMPU test"),
col = c("black", "blue"),
lty = c(1, 1))
# Chunk 8
# function for generalized linear ratio test (equation in c to be solved)
fn.glrt = function(c, alpha, n) {
d = qchisq(1 - alpha + pchisq(c, df = n - 1), df = n - 1)
equation = -(n/2) * log(c/n) + c/2 + (n/2) * log(d/n) - d/2
return(equation)
}
# calculate c and d
norm.var.glrt = function(alpha, n) {
# wiggle room
eps = 1e-8
# calculate c
c = uniroot ( f = fn.glrt ,
lower = 0,
upper = qchisq(alpha, df = n-1) - eps,
alpha = alpha ,
n = n)$root
# calculate d. Recall:
# P0(Y <= d) = 1 - alpha + P0(Y <= c) [since Y is continuous]
d = qchisq(1 - alpha + pchisq(c, df = n-1), df = n-1)
return(list(c = c, d = d))
}
# Chunk 1
knitr::opts_chunk$set(echo = TRUE,
include = TRUE,
warning = FALSE,
message = FALSE,
tidy = TRUE,
tidy.opts = list(width.cutoff=100),
fig.width = 6,
fig.height = 4,
fig.align = "center",
size = "footnotesize"
)
render_listings()
# Chunk 2
alpha = 0.04
n = 5
# P0(Y < a) = alpha/2
# F_Y(a) = P0(Y <= a)  = alpha/2 [as Y is continuous]
a = qchisq(p = alpha/2, df = n - 1, lower.tail = TRUE)
# P0(Y > b) = alpha/2
# 1 - P0(Y <= b) = alpha/2
# P0(Y <= b) = 1 - alpha/2
b = qchisq(p = 1 - alpha/2, df = n - 1, lower.tail = TRUE)
# print out the values of a and b
c(a, b)
# Chunk 3
# sigma values
sig.sq=(50:150)/100
# power of rejecting: P(chi^2 < a/sigma^2) + P(chi^2 > b/sigma^2)
power.rej = pchisq(q = a/sig.sq, df = n - 1, lower.tail = TRUE) +
pchisq(q = b/sig.sq, df = n - 1, lower.tail = FALSE)
# plot power against theta
plot(sig.sq, power.rej, type = "l", main = "Power of two tail test",
xlab = "sigma squared", ylab = "power")
# add a horizontal dotted line at 0.04
abline(h = 0.04, lty = 2)
# add sigma_0^2 too
abline(v = 1, col = "red")
# Chunk 4
fn = function(c, alpha, n) {
# find the value of d which satisfies the relationship of equation (2). Note that d is a function of c when written like this!
# P0(Y <= c) + P0(Y >= d) = alpha
# P0(Y >= d) = alpha - P0(Y <= c)
# P0(Y < d) = 1 - alpha + P0(Y <= c)
# P0(Y <= d) = 1 - alpha + P0(Y <= c) [since Y is continuous]
d = qchisq(1 - alpha + pchisq(c, df = n - 1), df = n - 1)
# sub it into equation (3) and return it as our equation
equation = (n - 1) * log(c) - c - (n - 1) * log(d) + d
return(equation)
}
# Chunk 5
eps = 1e-8
alpha = 0.04
n = 5
uniroot ( f = fn ,
lower = 0,
upper = qchisq(alpha, df = n-1) - eps,
alpha = alpha ,
n = n)
# Chunk 6
norm.var.umpu=function(alpha,n) {
# wiggle room
eps = 1e-8
# calculate c
c = uniroot ( f = fn ,
lower = 0,
upper = qchisq(alpha, df = n-1) - eps,
alpha = alpha ,
n = n)$root
# calculate d. Recall:
# P0(Y <= d) = 1 - alpha + P0(Y <= c) [since Y is continuous]
d = qchisq(1 - alpha + pchisq(c, df = n-1), df = n-1)
return(list(c = c, d = d))
}
norm.var.umpu(0.04, 5)
# Chunk 7
# significane level
alpha = 0.04
# degrees of freedom
n = 5
# sigma squared values
sig.sq=(50:150)/100
# for the two tailed test (use a and b from before):
power.rej = pchisq(q = a/sig.sq, df = n - 1, lower.tail = TRUE) +
pchisq(q = b/sig.sq, df = n - 1, lower.tail = FALSE)
plot(sig.sq, power.rej, type = "l", main = "comparing tests",
xlab = "sigma squared", ylab = "power")
abline(h = 0.04, lty = 2)
abline(v = 1, col = "red")
# for the UMPU test:
# 1. find the values of c and d according to alpha = 0.04 and n = 5
umpu = norm.var.umpu(alpha,n)
# 2. find the power of the umpu test for each theta value:
umpu.power = pchisq(umpu$c/sig.sq, df = n - 1) +
pchisq(umpu$d/sig.sq, df = n - 1, lower.tail = FALSE)
# 3. plot
lines(sig.sq, umpu.power, col = "blue")
# legend
legend("top", legend = c("Power of equal-tailed test", "power of UMPU test"),
col = c("black", "blue"),
lty = c(1, 1))
# Chunk 8
# function for generalized linear ratio test (equation in c to be solved)
fn.glrt = function(c, alpha, n) {
d = qchisq(1 - alpha + pchisq(c, df = n - 1), df = n - 1)
equation = -(n/2) * log(c/n) + c/2 + (n/2) * log(d/n) - d/2
return(equation)
}
# calculate c and d
norm.var.glrt = function(alpha, n) {
# wiggle room
eps = 1e-8
# calculate c
c = uniroot ( f = fn.glrt ,
lower = 0,
upper = qchisq(alpha, df = n-1) - eps,
alpha = alpha ,
n = n)$root
# calculate d. Recall:
# P0(Y <= d) = 1 - alpha + P0(Y <= c) [since Y is continuous]
d = qchisq(1 - alpha + pchisq(c, df = n-1), df = n-1)
return(list(c = c, d = d))
}
# plot everything
alpha = 0.04
n = 5
sig.sq=(50:150)/100
# for the two tailed test (use a and b from before):
power.rej = pchisq(q = a/sig.sq, df = n - 1, lower.tail = TRUE) +
pchisq(q = b/sig.sq, df = n - 1, lower.tail = FALSE)
plot(sig.sq, power.rej, type = "l", main = "comparing tests",
xlab = "sigma squared", ylab = "power")
abline(h = 0.04, lty = 2)
abline(v = 1, col = "red")
# for the UMPU test:
umpu = norm.var.umpu(alpha,n)
umpu.power = pchisq(umpu$c/sig.sq, df = n - 1) +
pchisq(umpu$d/sig.sq, df = n - 1, lower.tail = FALSE)
lines(sig.sq, umpu.power, col = "blue")
# for the glrt:
glrt = norm.var.glrt(alpha, n)
glrt.power = chisq(glrt$c/sig.sq, df = n - 1) +
pchisq(glrt$d/sig.sq, df = n - 1, lower.tail = FALSE)
lines(sig.sq, glrt.power, col = "green")
# Chunk 1
knitr::opts_chunk$set(echo = TRUE,
include = TRUE,
warning = FALSE,
message = FALSE,
tidy = TRUE,
tidy.opts = list(width.cutoff=100),
fig.width = 6,
fig.height = 4,
fig.align = "center",
size = "footnotesize"
)
render_listings()
# Chunk 2
alpha = 0.04
n = 5
# P0(Y < a) = alpha/2
# F_Y(a) = P0(Y <= a)  = alpha/2 [as Y is continuous]
a = qchisq(p = alpha/2, df = n - 1, lower.tail = TRUE)
# P0(Y > b) = alpha/2
# 1 - P0(Y <= b) = alpha/2
# P0(Y <= b) = 1 - alpha/2
b = qchisq(p = 1 - alpha/2, df = n - 1, lower.tail = TRUE)
# print out the values of a and b
c(a, b)
# Chunk 3
# sigma values
sig.sq=(50:150)/100
# power of rejecting: P(chi^2 < a/sigma^2) + P(chi^2 > b/sigma^2)
power.rej = pchisq(q = a/sig.sq, df = n - 1, lower.tail = TRUE) +
pchisq(q = b/sig.sq, df = n - 1, lower.tail = FALSE)
# plot power against theta
plot(sig.sq, power.rej, type = "l", main = "Power of two tail test",
xlab = "sigma squared", ylab = "power")
# add a horizontal dotted line at 0.04
abline(h = 0.04, lty = 2)
# add sigma_0^2 too
abline(v = 1, col = "red")
# Chunk 4
fn = function(c, alpha, n) {
# find the value of d which satisfies the relationship of equation (2). Note that d is a function of c when written like this!
# P0(Y <= c) + P0(Y >= d) = alpha
# P0(Y >= d) = alpha - P0(Y <= c)
# P0(Y < d) = 1 - alpha + P0(Y <= c)
# P0(Y <= d) = 1 - alpha + P0(Y <= c) [since Y is continuous]
d = qchisq(1 - alpha + pchisq(c, df = n - 1), df = n - 1)
# sub it into equation (3) and return it as our equation
equation = (n - 1) * log(c) - c - (n - 1) * log(d) + d
return(equation)
}
# Chunk 5
eps = 1e-8
alpha = 0.04
n = 5
uniroot ( f = fn ,
lower = 0,
upper = qchisq(alpha, df = n-1) - eps,
alpha = alpha ,
n = n)
# Chunk 6
norm.var.umpu=function(alpha,n) {
# wiggle room
eps = 1e-8
# calculate c
c = uniroot ( f = fn ,
lower = 0,
upper = qchisq(alpha, df = n-1) - eps,
alpha = alpha ,
n = n)$root
# calculate d. Recall:
# P0(Y <= d) = 1 - alpha + P0(Y <= c) [since Y is continuous]
d = qchisq(1 - alpha + pchisq(c, df = n-1), df = n-1)
return(list(c = c, d = d))
}
norm.var.umpu(0.04, 5)
# Chunk 7
# significane level
alpha = 0.04
# degrees of freedom
n = 5
# sigma squared values
sig.sq=(50:150)/100
# for the two tailed test (use a and b from before):
power.rej = pchisq(q = a/sig.sq, df = n - 1, lower.tail = TRUE) +
pchisq(q = b/sig.sq, df = n - 1, lower.tail = FALSE)
plot(sig.sq, power.rej, type = "l", main = "comparing tests",
xlab = "sigma squared", ylab = "power")
abline(h = 0.04, lty = 2)
abline(v = 1, col = "red")
# for the UMPU test:
# 1. find the values of c and d according to alpha = 0.04 and n = 5
umpu = norm.var.umpu(alpha,n)
# 2. find the power of the umpu test for each theta value:
umpu.power = pchisq(umpu$c/sig.sq, df = n - 1) +
pchisq(umpu$d/sig.sq, df = n - 1, lower.tail = FALSE)
# 3. plot
lines(sig.sq, umpu.power, col = "blue")
# legend
legend("top", legend = c("Power of equal-tailed test", "power of UMPU test"),
col = c("black", "blue"),
lty = c(1, 1))
# Chunk 8
# function for generalized linear ratio test (equation in c to be solved)
fn.glrt = function(c, alpha, n) {
d = qchisq(1 - alpha + pchisq(c, df = n - 1), df = n - 1)
equation = -(n/2) * log(c/n) + c/2 + (n/2) * log(d/n) - d/2
return(equation)
}
# calculate c and d
norm.var.glrt = function(alpha, n) {
# wiggle room
eps = 1e-8
# calculate c
c = uniroot ( f = fn.glrt ,
lower = 0,
upper = qchisq(alpha, df = n-1) - eps,
alpha = alpha ,
n = n)$root
# calculate d. Recall:
# P0(Y <= d) = 1 - alpha + P0(Y <= c) [since Y is continuous]
d = qchisq(1 - alpha + pchisq(c, df = n-1), df = n-1)
return(list(c = c, d = d))
}
# plot everything
alpha = 0.04
n = 5
sig.sq=(50:150)/100
# for the two tailed test (use a and b from before):
power.rej = pchisq(q = a/sig.sq, df = n - 1, lower.tail = TRUE) +
pchisq(q = b/sig.sq, df = n - 1, lower.tail = FALSE)
plot(sig.sq, power.rej, type = "l", main = "comparing tests",
xlab = "sigma squared", ylab = "power")
abline(h = 0.04, lty = 2)
abline(v = 1, col = "red")
# for the UMPU test:
umpu = norm.var.umpu(alpha,n)
umpu.power = pchisq(umpu$c/sig.sq, df = n - 1) +
pchisq(umpu$d/sig.sq, df = n - 1, lower.tail = FALSE)
lines(sig.sq, umpu.power, col = "blue")
# for the glrt:
glrt = norm.var.glrt(alpha, n)
glrt.power = pchisq(glrt$c/sig.sq, df = n - 1) +
pchisq(glrt$d/sig.sq, df = n - 1, lower.tail = FALSE)
lines(sig.sq, glrt.power, col = "green")
# Chunk 1
knitr::opts_chunk$set(echo = TRUE,
include = TRUE,
warning = FALSE,
message = FALSE,
tidy = TRUE,
tidy.opts = list(width.cutoff=100),
fig.width = 6,
fig.height = 4,
fig.align = "center",
size = "footnotesize"
)
render_listings()
# Chunk 2
alpha = 0.04
n = 5
# P0(Y < a) = alpha/2
# F_Y(a) = P0(Y <= a)  = alpha/2 [as Y is continuous]
a = qchisq(p = alpha/2, df = n - 1, lower.tail = TRUE)
# P0(Y > b) = alpha/2
# 1 - P0(Y <= b) = alpha/2
# P0(Y <= b) = 1 - alpha/2
b = qchisq(p = 1 - alpha/2, df = n - 1, lower.tail = TRUE)
# print out the values of a and b
c(a, b)
# Chunk 3
# sigma values
sig.sq=(50:150)/100
# power of rejecting: P(chi^2 < a/sigma^2) + P(chi^2 > b/sigma^2)
power.rej = pchisq(q = a/sig.sq, df = n - 1, lower.tail = TRUE) +
pchisq(q = b/sig.sq, df = n - 1, lower.tail = FALSE)
# plot power against theta
plot(sig.sq, power.rej, type = "l", main = "Power of two tail test",
xlab = "sigma squared", ylab = "power")
# add a horizontal dotted line at 0.04
abline(h = 0.04, lty = 2)
# add sigma_0^2 too
abline(v = 1, col = "red")
# Chunk 4
fn = function(c, alpha, n) {
# find the value of d which satisfies the relationship of equation (2). Note that d is a function of c when written like this!
# P0(Y <= c) + P0(Y >= d) = alpha
# P0(Y >= d) = alpha - P0(Y <= c)
# P0(Y < d) = 1 - alpha + P0(Y <= c)
# P0(Y <= d) = 1 - alpha + P0(Y <= c) [since Y is continuous]
d = qchisq(1 - alpha + pchisq(c, df = n - 1), df = n - 1)
# sub it into equation (3) and return it as our equation
equation = (n - 1) * log(c) - c - (n - 1) * log(d) + d
return(equation)
}
# Chunk 5
eps = 1e-8
alpha = 0.04
n = 5
uniroot ( f = fn ,
lower = 0,
upper = qchisq(alpha, df = n-1) - eps,
alpha = alpha ,
n = n)
# Chunk 6
norm.var.umpu=function(alpha,n) {
# wiggle room
eps = 1e-8
# calculate c
c = uniroot ( f = fn ,
lower = 0,
upper = qchisq(alpha, df = n-1) - eps,
alpha = alpha ,
n = n)$root
# calculate d. Recall:
# P0(Y <= d) = 1 - alpha + P0(Y <= c) [since Y is continuous]
d = qchisq(1 - alpha + pchisq(c, df = n-1), df = n-1)
return(list(c = c, d = d))
}
norm.var.umpu(0.04, 5)
# Chunk 7
# significane level
alpha = 0.04
# degrees of freedom
n = 5
# sigma squared values
sig.sq=(50:150)/100
# for the two tailed test (use a and b from before):
power.rej = pchisq(q = a/sig.sq, df = n - 1, lower.tail = TRUE) +
pchisq(q = b/sig.sq, df = n - 1, lower.tail = FALSE)
plot(sig.sq, power.rej, type = "l", main = "comparing tests",
xlab = "sigma squared", ylab = "power")
abline(h = 0.04, lty = 2)
abline(v = 1, col = "red")
# for the UMPU test:
# 1. find the values of c and d according to alpha = 0.04 and n = 5
umpu = norm.var.umpu(alpha,n)
# 2. find the power of the umpu test for each theta value:
umpu.power = pchisq(umpu$c/sig.sq, df = n - 1) +
pchisq(umpu$d/sig.sq, df = n - 1, lower.tail = FALSE)
# 3. plot
lines(sig.sq, umpu.power, col = "blue")
# legend
legend("top", legend = c("Power of equal-tailed test", "power of UMPU test"),
col = c("black", "blue"),
lty = c(1, 1))
# Chunk 8
# function for generalized linear ratio test (equation in c to be solved)
fn.glrt = function(c, alpha, n) {
d = qchisq(1 - alpha + pchisq(c, df = n - 1), df = n - 1)
equation = -(n/2) * log(c/n) + c/2 + (n/2) * log(d/n) - d/2
return(equation)
}
# calculate c and d
norm.var.glrt = function(alpha, n) {
# wiggle room
eps = 1e-8
# calculate c
c = uniroot ( f = fn.glrt ,
lower = 0,
upper = qchisq(alpha, df = n-1) - eps,
alpha = alpha ,
n = n)$root
# calculate d. Recall:
# P0(Y <= d) = 1 - alpha + P0(Y <= c) [since Y is continuous]
d = qchisq(1 - alpha + pchisq(c, df = n-1), df = n-1)
return(list(c = c, d = d))
}
# plot everything
alpha = 0.04
n = 5
sig.sq=(50:150)/100
# for the two tailed test (use a and b from before):
power.rej = pchisq(q = a/sig.sq, df = n - 1, lower.tail = TRUE) +
pchisq(q = b/sig.sq, df = n - 1, lower.tail = FALSE)
plot(sig.sq, power.rej, type = "l", main = "comparing tests",
xlab = "sigma squared", ylab = "power")
abline(h = 0.04, lty = 2)
abline(v = 1, col = "red")
# for the UMPU test:
umpu = norm.var.umpu(alpha,n)
umpu.power = pchisq(umpu$c/sig.sq, df = n - 1) +
pchisq(umpu$d/sig.sq, df = n - 1, lower.tail = FALSE)
lines(sig.sq, umpu.power, col = "blue")
# for the glrt:
glrt = norm.var.glrt(alpha, n)
glrt.power = pchisq(glrt$c/sig.sq, df = n - 1) +
pchisq(glrt$d/sig.sq, df = n - 1, lower.tail = FALSE)
lines(sig.sq, glrt.power, col = "Darkgreen")
# legend
legend("top", legend = c("Power of equal-tailed test", "power of UMPU test", "power of GLRT test"),
col = c("black", "blue", "Darkgreen"),
lty = c(1, 1, 1))
# Chunk 9
# plot everything
alpha = 0.04
n = 5
sig.sq=(1:400)/100
# for the two tailed test (use a and b from before):
power.rej = pchisq(q = a/sig.sq, df = n - 1, lower.tail = TRUE) +
pchisq(q = b/sig.sq, df = n - 1, lower.tail = FALSE)
plot(sig.sq, power.rej, type = "l", main = "comparing tests",
xlab = "sigma squared", ylab = "power")
abline(h = 0.04, lty = 2)
abline(v = 1, col = "red")
# for the UMPU test:
umpu = norm.var.umpu(alpha,n)
umpu.power = pchisq(umpu$c/sig.sq, df = n - 1) +
pchisq(umpu$d/sig.sq, df = n - 1, lower.tail = FALSE)
lines(sig.sq, umpu.power, col = "blue")
# for the glrt:
glrt = norm.var.glrt(alpha, n)
glrt.power = pchisq(glrt$c/sig.sq, df = n - 1) +
pchisq(glrt$d/sig.sq, df = n - 1, lower.tail = FALSE)
lines(sig.sq, glrt.power, col = "Darkgreen")
# legend
legend("top", legend = c("Power of equal-tailed test", "power of UMPU test", "power of GLRT test"),
col = c("black", "blue", "Darkgreen"),
lty = c(1, 1, 1))
