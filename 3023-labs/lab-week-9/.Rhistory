for (i in 1:L) {
s.mat = matrix(0, B, 2)
b.mat = matrix(0, B, 2)
# we fix the row in our matrix.
for (j in 1:B) {
X = rpois(1, th[i]) # draw one random number from pois(th[i])
s.mat[j, ] = simple(X) # constructing intervals
b.mat[j, ] = bayes(X)
}
# count the number of intervals not containing theta
nonconcoverage.simple[i] = sum(th[i] < s.mat[ , 1]) + sum(th[i] > s.mat[ , 2])
nonconcoverage.bayes[i] = sum(th[i] < b.mat[ , 1]) + sum(th[i] > b.mat[ , 2])
}
noncoverage.simple= noncoverage.bayes=0
# we fix the theta value
for (i in 1:L) {
s.mat = matrix(0, B, 2)
b.mat = matrix(0, B, 2)
# we fix the row in our matrix.
for (j in 1:B) {
X = rpois(1, th[i]) # draw one random number from pois(th[i])
s.mat[j, ] = simple(X) # constructing intervals
b.mat[j, ] = bayes(X)
}
# count the number of intervals not containing theta
noncoverage.simple[i] = sum(th[i] < s.mat[ , 1]) + sum(th[i] > s.mat[ , 2])
noncoverage.bayes[i] = sum(th[i] < b.mat[ , 1]) + sum(th[i] > b.mat[ , 2])
}
plot(th, noncoverage.simple/B,
type = "l",
col = "red",
main = "simulated risk of Poisson mean interval estimators",
xlab = expression(theta),
ylab = "Empirical noncoverage proportion")
lines(th, noncoverage.bayes/B, type = "l",
col = "blue")
legend("topleft",
legend = c("simple", "Bayes flat prior"),
col = c("red", "blue"),
lty = c(1, 1))
mean(c(1, 2, 3))
max(c(1, 2))
max(c(1, 2, 3, 4, 5))
mle.int=function(x,C) {
# x is a random sample:
thetaML = 1/mean(x)
# C is half with width of the intervals
d1 = max(thetaML, C)
c(d1 - C, d1 + C)
}
# Chunk 1
knitr::opts_chunk$set(echo = TRUE,
include = TRUE,
warning = FALSE,
message = FALSE,
tidy = TRUE,
tidy.opts = list(width.cutoff=100),
fig.width = 6,
fig.height = 4,
fig.align = "center",
size = "footnotesize"
)
# Chunk 2
mle.int=function(x,C) {
# x is a random sample:
thetaML = 1/mean(x)
# C is half with width of the intervals
d1 = max(thetaML, C)
c(d1 - C, d1 + C)
}
# Chunk 3
n = 4
C = 1.5
th0 = 2
x = rexp(n, rate = th0)
mle.int(x, C)
3 * c(1, 2)
bayes.int=function(x,C) {
d2 = C * (exp(2 * mean(x) * C) + 1)/(exp(2 * mean(x) * C) - 1)
c(d2 - C, d2 + C)
}
?curve
?dgamma
?curve
?dgamma
?curve
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m)
n = 4
C = 1.5
th0 = 2
x = rexp(n, rate = th0)
bayes.int(x, C)
m = mean(x)
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m)
?curvew
?curve
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m)
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m, a
dd = TRUE,
xlab = expression(theta),
ylab = "probability")
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m, a
dd = TRUE,
xname = expression(theta),
yname = "probability")
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m,
add = TRUE,
xlab = expression(theta),
ylab = "probability")
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m,
add = TRUE,
xlab = expression(theta),
ylab = "probability")
clear
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m,
add = TRUE,
xlab = expression(theta),
ylab = "probability")
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m,
xlab = expression(theta),
ylab = "probability")
?abline
abline(v = bayes.int(x, C))
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m,
xlab = expression(theta),
ylab = "probability", add = TRUE)
abline(v = bayes.int(x, C))
abline(v = bayes.int(x, C))
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m,
xlab = expression(theta),
ylab = "probability", add = TRUE)
abline(v = bayes.int(x, C))
?abline
m = mean(x)
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m,
xlab = expression(theta),
ylab = "probability",
add = TRUE)
abline(v = bayes.int(x, C))
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m,
add = TRUE)
abline(v = bayes.int(x, C))
# create a plot first to add curve and abline to it
plot(0, 0)
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m,
add = TRUE)
?plot
# create a plot first to add curve and abline to it
m = mean(x)
plot(0, 0, xlim = 0, ylim = 3/m)
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m,
add = TRUE)
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m,
add = TRUE)
plot(0, 0, xlim = 0, ylim = 3/m)
?plot
# create a plot first to add curve and abline to it
m = mean(x)
plot(0, 0, xlim = c(0, 3/m), ylim = c(0, 0.3))
curve(dgamma(x, shape = n + 1, rate = n * m), from = 0, to = 3/m,
add = TRUE)
?plot
# label the Origin
plot(0, 0,
xlim = c(0, 3/m),
ylim = c(0, 0.3),
xlab = expression(theta),
ylab = "probability")
curve(dgamma(x, shape = n + 1, rate = n * m),
from = 0,
to = 3/m,
add = TRUE)
?abline
m = mean(x)
# label the Origin
plot(0, 0,
xlim = c(0, 3/m),
ylim = c(0, 0.3),
xlab = expression(theta),
ylab = "probability")
curve(dgamma(x, shape = n + 1, rate = n * m),
from = 0,
to = 3/m,
add = TRUE)
abline(v = mle_interval, col = "red")
# Chunk 1
knitr::opts_chunk$set(echo = TRUE,
include = TRUE,
warning = FALSE,
message = FALSE,
tidy = TRUE,
tidy.opts = list(width.cutoff=100),
fig.width = 6,
fig.height = 4,
fig.align = "center",
size = "footnotesize"
)
render_listings()
# Chunk 2
mle.int=function(x,C) {
# x is a random sample:
thetaML = 1/mean(x)
# C is half with width of the intervals
d1 = max(thetaML, C)
c(d1 - C, d1 + C)
}
# Chunk 3
n = 4
C = 1.5
th0 = 2
x = rexp(n, rate = th0)
mle_interval = mle.int(x, C)
mle_interval
# Chunk 4
bayes.int=function(x,C) {
d2 = C * (exp(2 * mean(x) * C) + 1)/(exp(2 * mean(x) * C) - 1)
c(d2 - C, d2 + C)
}
# Chunk 5
n = 4
C = 1.5
th0 = 2
x = rexp(n, rate = th0)
bayes_interval = bayes.int(x, C)
bayes_interval
# Chunk 6
m = mean(x)
# label the Origin
plot(0, 0,
xlim = c(0, 3/m),
ylim = c(0, 0.3),
xlab = expression(theta),
ylab = "probability")
curve(dgamma(x, shape = n + 1, rate = n * m),
from = 0,
to = 3/m,
add = TRUE)
abline(v = mle_interval, col = "red")
abline(v = bayes_interval, col = "blue")
abline(h = dgamma(bayes_interval[1], shape = n + 1, rate = n * m), lty = 3)
?rexp
th=(1:500)/50
L=length(th)
B=1000
noncoverage.mle=noncoverage.bayes=0
c = 1.5
# we fix the theta value
for (i in 1:L) {
mle.mat = matrix(0, B, 2)
bayes.mat = matrix(0, B, 2)
# we fix the row in our matrix.
for (j in 1:B) {
x = rexp(4, rate = th[i]) # draw one random number from pois(th[i])
mle.mat[j, ] = mle.int(x, c) # constructing intervals
bayes.mat[j, ] = bayes.int(x, c)
}
# count the number of intervals not containing theta
noncoverage.mle[i] = sum(th[i] < mle.mat[ , 1]) + sum(th[i] > mle.mat[ , 2])
noncoverage.bayes[i] = sum(th[i] < bayes.mat[ , 1]) + sum(th[i] > bayes.mat[ , 2])
}
plot(th, noncoverage.mle/B,
type = "l",
col = "red",
main = "simulated proportions of non-coverage for different interval methods",
xlab = expression(theta),
ylab = "Empirical noncoverage proportion")
lines(th, noncoverage.bayes/B, type = "l",
col = "blue")
legend("topleft",
legend = c("simple", "Bayes flat prior"),
col = c("red", "blue"),
lty = c(1, 1))
?sprintf
?plot
plot(th, noncoverage.mle/B,
type = "l",
col = "red",
main = "Simulated proportions of non-coverage for different interval methods",
xlab = expression(theta),
ylab = "Empirical noncoverage proportion",
par(cex.main = 0.8))
?cex
plot(th, noncoverage.mle/B,
type = "l",
col = "red",
main = "Simulated proportions of non-coverage for different interval methods",
xlab = expression(theta),
ylab = "Empirical noncoverage proportion",
cex.main = 0.75,
cex.yaxis = 1)
plot(th, noncoverage.mle/B,
type = "l",
col = "red",
main = "Simulated proportions of non-coverage for different interval methods",
xlab = expression(theta),
ylab = "Empirical noncoverage proportion",
cex.main = 0.75,
cex.axis = 1)
?pgamma
risk.overest = pgamma(q = 1/(th + c), shape = n, rate = n * th) # this applies to all values in th
big = (th>=(2*C)) # find the theta values >= 2C
risk.underest = 0*risk.overest # Start with a vector of zeroes
risk.underest[big] = pgamma(q = 1/(th[big] + c), shape = n, rate = n * th[big]) +
pgamma(q = 1/(th[big] + c), shape = n, rate = n * th[big], lower.tail = FALSE)
m.risk = risk.overest + risk.underest
?plot
plot(th, m.risk)
>lines
?lines
risk.overest = pgamma(q = 1/(th + c), shape = n, rate = n * th) # this applies to all values in th
big = (th>=(2*C)) # find the theta values >= 2C
risk.underest = 0*risk.overest # Start with a vector of zeroes
risk.underest[big] = pgamma(q = 1/(th[big] + c), shape = n, rate = n * th[big]) +
pgamma(q = 1/(th[big] + c), shape = n, rate = n * th[big], lower.tail = FALSE)
risk.underest[big] = pgamma(q = 1/(th[big] + c), shape = n, rate = n * th[big]) +
pgamma(q = 1/(th[big] + c), shape = n, rate = n * th[big], lower.tail = FALSE)
m.risk = risk.overest + risk.underest
risk.overest = pgamma(q = 1/(2*c) * log(1 + 2*c/th), shape = n, rate = n * th) +
pgamma(q = 1/(2*c) * log(th/(th - 2*c)), shape = n, rate = n * th, lower.tail = FALSE)
big = (th>=(2*C)) # find the theta values >= 2C
risk.underest = 0*risk.overest # Start with a vector of zeroes
risk.underest[big] = pgamma(q = 1/(2*c) * log(1 + 2*c/th[big]), shape = n, rate = n * th[big]) +
pgamma(q = 1/(2*c) * log(th[big]/(th[big] - 2*c)), shape = n, rate = n * th[big], lower.tail = FALSE)
b.risk = risk.overest + risk.underest
risk.overest = pgamma(q = 1/(2*c) * log(1 + 2*c/th), shape = n, rate = n * th) +
pgamma(q = 1/(2*c) * log(th/(th - 2*c)), shape = n, rate = n * th, lower.tail = FALSE)
big = (th>=(2*C)) # find the theta values >= 2C
risk.underest = 0*risk.overest # Start with a vector of zeroes
risk.underest[big] = pgamma(q = 1/(2*c) * log(1 + 2*c/th[big]), shape = n, rate = n * th[big]) +
pgamma(q = 1/(2*c) * log(th[big]/(th[big] - 2*c)), shape = n, rate = n * th[big], lower.tail = FALSE)
b.risk = risk.overest + risk.underest
knitr::opts_chunk$set(echo = TRUE,
include = TRUE,
warning = FALSE,
message = FALSE,
tidy = TRUE,
tidy.opts = list(width.cutoff=100),
fig.width = 6,
fig.height = 4,
fig.align = "center",
size = "footnotesize"
)
render_listings()
risk.overest = pgamma(q = 1/(th + c), shape = n, rate = n * th) # this applies to all values in th
big = (th>=(2*C)) # find the theta values >= 2C
risk.underest = 0*risk.overest # Start with a vector of zeroes
risk.underest[big] = pgamma(q = 1/(th[big] + c), shape = n, rate = n * th[big]) +
pgamma(q = 1/(th[big] + c), shape = n, rate = n * th[big], lower.tail = FALSE)
m.risk = risk.overest + risk.underest
@
\item We compute the risk for the Bayes interval for each values of $\theta$ from our vector \verb+th+ and we save it in a vector called \verb+m.risk+.
knitr::opts_chunk$set(echo = TRUE,
include = TRUE,
warning = FALSE,
message = FALSE,
tidy = TRUE,
tidy.opts = list(width.cutoff=100),
fig.width = 6,
fig.height = 4,
fig.align = "center",
size = "footnotesize"
)
render_listings()
risk.overest = pgamma(q = 1/(2*c) * log(1 + 2*c/th), shape = n, rate = n * th) +
pgamma(q = 1/(2*c) * log(th/(th - 2*c)), shape = n, rate = n * th, lower.tail = FALSE)
big = (th>=(2*C)) # find the theta values >= 2C
risk.underest = 0*risk.overest # Start with a vector of zeroes
risk.underest[big] = pgamma(q = 1/(2*c) * log(1 + 2*c/th[big]), shape = n, rate = n * th[big]) +
pgamma(q = 1/(2*c) * log(th[big]/(th[big] - 2*c)), shape = n, rate = n * th[big], lower.tail = FALSE)
b.risk = risk.overest + risk.underest
@
We now plot our curves:
knitr::opts_chunk$set(echo = TRUE,
include = TRUE,
warning = FALSE,
message = FALSE,
tidy = TRUE,
tidy.opts = list(width.cutoff=100),
fig.width = 6,
fig.height = 4,
fig.align = "center",
size = "footnotesize"
)
render_listings()
plot(th, m.risk, col = "blue")
lines(th, b.risk, col = "red")
@
\end{enumerate}
\end{document}
?lty
?lwd
?plot
plot(th, m.risk, col = "blue", lwd = 2)
plot(th, m.risk, col = "blue", lwd = 1)
plot(th, m.risk, col = "blue", lwd = 0.5)
plot(th, m.risk, col = "blue", lwd = 0.2)
lines(th, b.risk, col = "red", lwd = 2)
risk.overest = pgamma(q = 1/(2*c) * log(1 + 2*c/th), shape = n, rate = n * th) +
pgamma(q = 1/(2*c) * log(th/(th - 2*c)), shape = n, rate = n * th, lower.tail = FALSE)
th
risk.overest = pgamma(q = 1/(2*c) * log(1 + 2*c/th), shape = n, rate = n * th) +
pgamma(q = 1/(2*c) * log(th/(th - 2*c)), shape = n, rate = n * th, lower.tail = FALSE)
risk.overest
risk.overest = pgamma(q = 1/(2*c) * log(1 + 2*c/th), shape = n, rate = n * th) +
pgamma(q = 1/(2*c) * log(th/(th - 2*c)), shape = n, rate = n * th, lower.tail = FALSE)
log(1 + 2*c/th)
th
risk.underest = 0*risk.overest # Start with a vector of zeroes
risk.underest[big] = pgamma(q = 1/(2*c) * log(1 + 2*c/th[big]), shape = n, rate = n * th[big]) +
pgamma(q = 1/(2*c) * log(th[big]/(th[big] - 2*c)), shape = n, rate = n * th[big], lower.tail = FALSE)
risk.overest = pgamma(q = 1/(2*c) * log(1 + 2*c/th), shape = n, rate = n * th)
risk.underest = 0*risk.overest # Start with a vector of zeroes
big = th >= 2*c
risk.underest[big] = pgamma(q = 1/(2*c) * log(1 + 2*c/th[big]), shape = n, rate = n * th[big]) +
pgamma(q = 1/(2*c) * log(th[big]/(th[big] - 2*c)), shape = n, rate = n * th[big], lower.tail = FALSE)
b.risk = risk.overest + risk.underest
plot(th, m.risk, col = "blue", lwd = 0.2)
lines(th, b.risk, col = "red", lwd = 2)
risk.overest = pgamma(q = 1/(2*c) * log(1 + 2*c/th), shape = n, rate = n * th)
risk.underest = 0*risk.overest # Start with a vector of zeroes
big = th >= 2*c
risk.underest[big] = pgamma(q = 1/(2*c) * log(1 + 2*c/th[big]), shape = n, rate = n * th[big]) +
pgamma(q = 1/(2*c) * log(th[big]/(th[big] - 2*c)), shape = n, rate = n * th[big], lower.tail = FALSE)
b.risk = risk.overest + risk.underest
risk.overest = pgamma(q = 1/(2*c) * log(1 + 2*c/th), shape = n, rate = n * th)
risk.underest = 0*risk.overest # Start with a vector of zeroes
big = th >= 2*c
risk.underest[big] = pgamma(q = 1/(2*c) * log(1 + 2*c/th[big]), shape = n, rate = n * th[big]) +
pgamma(q = 1/(2*c) * log(th[big]/(th[big] - 2*c)), shape = n, rate = n * th[big], lower.tail = FALSE)
b.risk = risk.overest + risk.underest
knitr::opts_chunk$set(echo = TRUE,
include = TRUE,
warning = FALSE,
message = FALSE,
tidy = TRUE,
tidy.opts = list(width.cutoff=100),
fig.width = 6,
fig.height = 4,
fig.align = "center",
size = "footnotesize"
)
render_listings()
risk.overest = pgamma(q = 1/(th + c), shape = n, rate = n * th) # this applies to all values in th
big = (th>=(2*C)) # find the theta values >= 2C
risk.underest = 0*risk.overest # Start with a vector of zeroes
risk.underest[big] = pgamma(q = 1/(th[big] + c), shape = n, rate = n * th[big]) +
pgamma(q = 1/(th[big] + c), shape = n, rate = n * th[big], lower.tail = FALSE)
m.risk = risk.overest + risk.underest
@
\item We compute the risk for the Bayes interval for each values of $\theta$ from our vector \verb+th+ and we save it in a vector called \verb+m.risk+.
knitr::opts_chunk$set(echo = TRUE,
include = TRUE,
warning = FALSE,
message = FALSE,
tidy = TRUE,
tidy.opts = list(width.cutoff=100),
fig.width = 6,
fig.height = 4,
fig.align = "center",
size = "footnotesize"
)
render_listings()
risk.overest = pgamma(q = 1/(2*c) * log(1 + 2*c/th), shape = n, rate = n * th)
risk.underest = 0*risk.overest # Start with a vector of zeroes
big = th >= 2*c
risk.underest[big] = pgamma(q = 1/(2*c) * log(1 + 2*c/th[big]), shape = n, rate = n * th[big]) +
pgamma(q = 1/(2*c) * log(th[big]/(th[big] - 2*c)), shape = n, rate = n * th[big], lower.tail = FALSE)
b.risk = risk.overest + risk.underest
@
We now plot our curves:
knitr::opts_chunk$set(echo = TRUE,
include = TRUE,
warning = FALSE,
message = FALSE,
tidy = TRUE,
tidy.opts = list(width.cutoff=100),
fig.width = 6,
fig.height = 4,
fig.align = "center",
size = "footnotesize"
)
render_listings()
plot(th, m.risk, col = "blue", lwd = 0.2)
lines(th, b.risk, col = "red", lwd = 2)
@
\end{enumerate}
plot(th, m.risk, col = "blue", lwd = 0.2,
main = "risk of mle interval and bayes interval for different theta values",
cex.main = 0.85,
cex.axis = 0.8,
xlab = expression(theta),
ylab = "risk")
lines(th, b.risk, col = "red", lwd = 2)
legend("topleft",
legend = c("mle", "Bayes flat prior"),
col = c("blue", "red"),
lty = c(1, 1))
legend("bottomright",
legend = c("mle", "Bayes flat prior"),
col = c("blue", "red"),
lty = c(1, 1))
plot(th, m.risk, col = "blue", lwd = 0.2,
main = "risk of mle interval and bayes interval for different theta values",
cex.main = 0.85,
cex.axis = 0.8,
xlab = expression(theta),
ylab = "risk")
lines(th, b.risk, col = "red", lwd = 2)
legend("bottomright",
legend = c("mle", "Bayes flat prior"),
col = c("blue", "red"),
lty = c(1, 1))
