?rbinom
samples = 1000
size = 200
p = 0.3
X = rbinom(samples, size, p)
X
samples = 1000
size = 200
p = 0.3
X = rbinom(samples, size, p)
X
hist(X)
samples = 1000
size = 200
p = 0.3
X = rbinom(samples, size, p)
hist(X)
?pnorm
dnorm(1)
pnorm(0)
dnorm(0)
1/sqrt(2*pi)*exp(-1/2 * (0)^2)
samples = 1000
size = 200
p = 0.3
X = rbinom(samples, size, p)
hist(X, prob = TRUE, main = "Distribution of the bin(200, 0.3)")
X_mean = size * p
X_sd = sqrt(size * p * (1 - p))
curve(dnorm(x, mean = X_mean, sd = X_sd), xlim = c(0, 200), add = TRUE)
pbinom(55, size, p) - pbinom(45, size, p)
pnorm(55.5, mean = X_mean, sd = X_sd) - pnorm(45.5, mean = X_mean, sd = X_sd)
?rbinom
?poisson
?dpois
?rbinom
?hist
simulations = 1000
size = 200
p = 0.3
lambda = 6
# 1000 draws of a binomial distribution
X = rbinom(simulations, size, p)
# 1000 draws of a poisson distribution
Y = rpois(similations, lambda)
# plot with 1 row and 2 columns
par(mfrow=c(1,2)
# Historgrams of X and Y
hist(X, probability = TRUE, main = "binomial distribution")
hist(Y, probability = TRUE, main = "Poisson distribution")
samples = 1000
size = 200
p = 0.3
X = rbinom(samples, size, p)
hist(X, prob = TRUE, main = "Distribution of the bin(200, 0.3)")
X_mean = size * p
X_sd = sqrt(size * p * (1 - p))
curve(dnorm(x, mean = X_mean, sd = X_sd), xlim = c(0, 200), add = TRUE)
simulations = 1000
size = 200
p = 0.3
lambda = 6
# 1000 draws of a binomial distribution
X = rbinom(simulations, size, p)
# 1000 draws of a poisson distribution
Y = rpois(similations, lambda)
# 1000 draws of a poisson distribution
Y = rpois(simiulations, lambda)
# plot with 1 row and 2 columns
# Historgrams of X and Y
hist(X, probability = TRUE, main = "binomial distribution")
hist(Y, probability = TRUE, main = "Poisson distribution")
# Historgrams of X and Y
hist(X, probability = TRUE, main = "binomial distribution")
# 1000 draws of a poisson distribution
Y = rpois(simiulations, lambda)
# 1000 draws of a poisson distribution
Y = rpois(simulations, lambda)
# plot with 1 row and 2 columns
# Historgrams of X and Y
hist(X, probability = TRUE, main = "binomial distribution")
hist(Y, probability = TRUE, main = "Poisson distribution")
?pbinom
?ppois
?runif
?matrix
?apply
?par
?mfrow
?hist
?curve
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = runif(sim_number * n1, min = 0, max = 1)
sim1 = matrix(data = temp1, nrow = n1, ncol = sim_number)
sim1 = sim1 - mu
S1 = apply(sim1, MARGIN = 1, FUN = sum)/sqrt(n1 * sigma_squared)
# sample from the uniform distribution n2 times and repeat the experiment
# sim_number of times
temp2 = runif(sim_number * n2, min = 0, max = 1)
sim2 = matrix(data = temp2, nrow = n2, ncol = sim_number)
sim2 = sim2 - mu
S2 = apply(sim2, MARGIN = 1, FUN = sum)/sqrt(n2 * sigma_squared)
par(mfrow = c(1, 2))
hist(S1)
curve(dnorm(x, mean = 0, sd = 1), xlim = c(-3, 3))
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = runif(sim_number * n1, min = 0, max = 1)
sim1 = matrix(data = temp1, nrow = n1, ncol = sim_number)
sim1 = sim1 - mu
S1 = apply(sim1, MARGIN = 1, FUN = sum)/sqrt(n1 * sigma_squared)
# sample from the uniform distribution n2 times and repeat the experiment
# sim_number of times
temp2 = runif(sim_number * n2, min = 0, max = 1)
sim2 = matrix(data = temp2, nrow = n2, ncol = sim_number)
sim2 = sim2 - mu
S2 = apply(sim2, MARGIN = 1, FUN = sum)/sqrt(n2 * sigma_squared)
par(mfrow = c(1, 2))
hist(S1)
curve(dnorm(x, mean = 0, sd = 1), xlim = c(-3, 3), add = TRUE)
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = runif(sim_number * n1, min = 0, max = 1)
sim1 = matrix(data = temp1, nrow = n1, ncol = sim_number)
sim1 = sim1 - mu
S1 = apply(sim1, MARGIN = 1, FUN = sum)/sqrt(n1 * sigma_squared)
# sample from the uniform distribution n2 times and repeat the experiment
# sim_number of times
temp2 = runif(sim_number * n2, min = 0, max = 1)
sim2 = matrix(data = temp2, nrow = n2, ncol = sim_number)
sim2 = sim2 - mu
S2 = apply(sim2, MARGIN = 1, FUN = sum)/sqrt(n2 * sigma_squared)
par(mfrow = c(1, 2))
hist(S1, probability = TRUE)
curve(dnorm(x, mean = 0, sd = 1), xlim = c(-3, 3), add = TRUE)
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = runif(sim_number * n1, min = 0, max = 1)
sim1 = matrix(data = temp1, nrow = n1, ncol = sim_number)
sim1 = sim1 - mu
S1 = apply(sim1, MARGIN = 1, FUN = sum)/sqrt(n1 * sigma_squared)
# sample from the uniform distribution n2 times and repeat the experiment
# sim_number of times
temp2 = runif(sim_number * n2, min = 0, max = 1)
sim2 = matrix(data = temp2, nrow = n2, ncol = sim_number)
sim2 = sim2 - mu
S2 = apply(sim2, MARGIN = 1, FUN = sum)/sqrt(n2 * sigma_squared)
par(mfrow = c(1, 2))
hist(S1, probability = TRUE)
curve(dnorm(x, mean = 0, sd = 1), add = TRUE)
set.seed(3023)
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = (runif(sim_number * n1) - mu)/sqrt(n1 * sigma_squared)
mat_temp1 = matrix(temp1, ncol = n1)
dim(mat_temp1)
set.seed(3023)
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = (runif(sim_number * n1) - mu)/sqrt(n1 * sigma_squared)
mat_temp1 = matrix(temp1, ncol = n1)
dim(mat_temp1)
S1 = apply(mate_temp1, 1, sum)
set.seed(3023)
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = (runif(sim_number * n1) - mu)/sqrt(n1 * sigma_squared)
mat_temp1 = matrix(temp1, ncol = n1)
dim(mat_temp1)
S1 = apply(mat_temp1, 1, sum)
set.seed(3023)
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = (runif(sim_number * n1) - mu)/sqrt(n1 * sigma_squared)
mat_temp1 = matrix(temp1, ncol = n1)
dim(mat_temp1)
S1 = apply(mat_temp1, 1, sum)
hist(S1, probability = TRUE)
set.seed(3023)
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = (runif(sim_number * n1) - mu)/sqrt(n1 * sigma_squared)
mat_temp1 = matrix(temp1, ncol = n1)
dim(mat_temp1)
S1 = apply(mat_temp1, 1, sum)
hist(S1, probability = TRUE)
curve(dnorm(x), add = TRUE)
?vecotr
?vector
?rbinom
# sample size
n = 100
# Number of simulation iterations
N = 1000
# theta values and length of this vector of values
thetaVals = (1:39)/40
len = length(thetaVals)
# Declare the mean squared error vectors to be plotted against the theta values
mse0 = vector(mode = "numeric", length = len)
mse1 = vector(mode = "numeric", length = len)
mse2 = vector(mode = "numeric", length = len)
# Declare temporary variables to be used in the loop
temp0 = vector(mode = "numeric", length = N)
temp1 = vector(mode = "numeric", length = N)
temp2 = vector(mode = "numeric", length = N)
for (i in 1:len) {
# We set the current value of theta.
currThetaValue = thetaVals[i]
# For the current theta value, we calculate the mean squared error for all
# three estimators
for (j in 1:N) {
# step 1: Draw a sample of n binomal observations
obs = rbinom(n = n, size = 2, prob = currThetaValue)
# calculate the value of theta0, theta1 and theta2
temp0[j] = 1 - sqrt(sum(obs == 0)/n)
temp1[j] = 1/2 * mean(obs)
temp0[j] = sqrt(sum(obs == 2)/n)
}
temp0 = (temp0 - currThetaValue)^2
temp1 = (temp1 - currThetaValue)^2
temp2 = (temp2 - currThetaValue)^2
mse0[i] = mean(temp0)
mse1[i] = mean(temp1)
mse2[i] = mean(temp2)
}
# sample size
n = 100
# Number of simulation iterations
N = 1000
# theta values and length of this vector of values
thetaVals = (1:39)/40
len = length(thetaVals)
# Declare the mean squared error vectors to be plotted against the theta values
mse0 = vector(mode = "numeric", length = len)
mse1 = vector(mode = "numeric", length = len)
mse2 = vector(mode = "numeric", length = len)
# Declare temporary variables to be used in the loop
temp0 = vector(mode = "numeric", length = N)
temp1 = vector(mode = "numeric", length = N)
temp2 = vector(mode = "numeric", length = N)
for (i in 1:len) {
# We set the current value of theta.
currThetaValue = thetaVals[i]
# For the current theta value, we calculate the mean squared error for all
# three estimators
for (j in 1:N) {
# step 1: Draw a sample of n binomal observations
obs = rbinom(n = n, size = 2, prob = currThetaValue)
# calculate the value of theta0, theta1 and theta2
temp0[j] = 1 - sqrt(sum(obs == 0)/n)
temp1[j] = 1/2 * mean(obs)
temp0[j] = sqrt(sum(obs == 2)/n)
}
temp0 = (temp0 - currThetaValue)^2
temp1 = (temp1 - currThetaValue)^2
temp2 = (temp2 - currThetaValue)^2
mse0[i] = mean(temp0)
mse1[i] = mean(temp1)
mse2[i] = mean(temp2)
}
mse0
mse1
mse2
thetaVals
?range
range(c(1, 2, 3, 4))
?plot
mse1
thetaVals
?lines
mse2
?legend
?plot
