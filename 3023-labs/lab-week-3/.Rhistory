samples = 1000
size = 200
p = 0.3
X = rbinom(samples, size, p)
hist(X)
?pnorm
dnorm(1)
pnorm(0)
dnorm(0)
1/sqrt(2*pi)*exp(-1/2 * (0)^2)
samples = 1000
size = 200
p = 0.3
X = rbinom(samples, size, p)
hist(X, prob = TRUE, main = "Distribution of the bin(200, 0.3)")
X_mean = size * p
X_sd = sqrt(size * p * (1 - p))
curve(dnorm(x, mean = X_mean, sd = X_sd), xlim = c(0, 200), add = TRUE)
pbinom(55, size, p) - pbinom(45, size, p)
pnorm(55.5, mean = X_mean, sd = X_sd) - pnorm(45.5, mean = X_mean, sd = X_sd)
?rbinom
?poisson
?dpois
?rbinom
?hist
simulations = 1000
size = 200
p = 0.3
lambda = 6
# 1000 draws of a binomial distribution
X = rbinom(simulations, size, p)
# 1000 draws of a poisson distribution
Y = rpois(similations, lambda)
# plot with 1 row and 2 columns
par(mfrow=c(1,2)
# Historgrams of X and Y
hist(X, probability = TRUE, main = "binomial distribution")
hist(Y, probability = TRUE, main = "Poisson distribution")
samples = 1000
size = 200
p = 0.3
X = rbinom(samples, size, p)
hist(X, prob = TRUE, main = "Distribution of the bin(200, 0.3)")
X_mean = size * p
X_sd = sqrt(size * p * (1 - p))
curve(dnorm(x, mean = X_mean, sd = X_sd), xlim = c(0, 200), add = TRUE)
simulations = 1000
size = 200
p = 0.3
lambda = 6
# 1000 draws of a binomial distribution
X = rbinom(simulations, size, p)
# 1000 draws of a poisson distribution
Y = rpois(similations, lambda)
# 1000 draws of a poisson distribution
Y = rpois(simiulations, lambda)
# plot with 1 row and 2 columns
# Historgrams of X and Y
hist(X, probability = TRUE, main = "binomial distribution")
hist(Y, probability = TRUE, main = "Poisson distribution")
# Historgrams of X and Y
hist(X, probability = TRUE, main = "binomial distribution")
# 1000 draws of a poisson distribution
Y = rpois(simiulations, lambda)
# 1000 draws of a poisson distribution
Y = rpois(simulations, lambda)
# plot with 1 row and 2 columns
# Historgrams of X and Y
hist(X, probability = TRUE, main = "binomial distribution")
hist(Y, probability = TRUE, main = "Poisson distribution")
?pbinom
?ppois
?runif
?matrix
?apply
?par
?mfrow
?hist
?curve
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = runif(sim_number * n1, min = 0, max = 1)
sim1 = matrix(data = temp1, nrow = n1, ncol = sim_number)
sim1 = sim1 - mu
S1 = apply(sim1, MARGIN = 1, FUN = sum)/sqrt(n1 * sigma_squared)
# sample from the uniform distribution n2 times and repeat the experiment
# sim_number of times
temp2 = runif(sim_number * n2, min = 0, max = 1)
sim2 = matrix(data = temp2, nrow = n2, ncol = sim_number)
sim2 = sim2 - mu
S2 = apply(sim2, MARGIN = 1, FUN = sum)/sqrt(n2 * sigma_squared)
par(mfrow = c(1, 2))
hist(S1)
curve(dnorm(x, mean = 0, sd = 1), xlim = c(-3, 3))
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = runif(sim_number * n1, min = 0, max = 1)
sim1 = matrix(data = temp1, nrow = n1, ncol = sim_number)
sim1 = sim1 - mu
S1 = apply(sim1, MARGIN = 1, FUN = sum)/sqrt(n1 * sigma_squared)
# sample from the uniform distribution n2 times and repeat the experiment
# sim_number of times
temp2 = runif(sim_number * n2, min = 0, max = 1)
sim2 = matrix(data = temp2, nrow = n2, ncol = sim_number)
sim2 = sim2 - mu
S2 = apply(sim2, MARGIN = 1, FUN = sum)/sqrt(n2 * sigma_squared)
par(mfrow = c(1, 2))
hist(S1)
curve(dnorm(x, mean = 0, sd = 1), xlim = c(-3, 3), add = TRUE)
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = runif(sim_number * n1, min = 0, max = 1)
sim1 = matrix(data = temp1, nrow = n1, ncol = sim_number)
sim1 = sim1 - mu
S1 = apply(sim1, MARGIN = 1, FUN = sum)/sqrt(n1 * sigma_squared)
# sample from the uniform distribution n2 times and repeat the experiment
# sim_number of times
temp2 = runif(sim_number * n2, min = 0, max = 1)
sim2 = matrix(data = temp2, nrow = n2, ncol = sim_number)
sim2 = sim2 - mu
S2 = apply(sim2, MARGIN = 1, FUN = sum)/sqrt(n2 * sigma_squared)
par(mfrow = c(1, 2))
hist(S1, probability = TRUE)
curve(dnorm(x, mean = 0, sd = 1), xlim = c(-3, 3), add = TRUE)
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = runif(sim_number * n1, min = 0, max = 1)
sim1 = matrix(data = temp1, nrow = n1, ncol = sim_number)
sim1 = sim1 - mu
S1 = apply(sim1, MARGIN = 1, FUN = sum)/sqrt(n1 * sigma_squared)
# sample from the uniform distribution n2 times and repeat the experiment
# sim_number of times
temp2 = runif(sim_number * n2, min = 0, max = 1)
sim2 = matrix(data = temp2, nrow = n2, ncol = sim_number)
sim2 = sim2 - mu
S2 = apply(sim2, MARGIN = 1, FUN = sum)/sqrt(n2 * sigma_squared)
par(mfrow = c(1, 2))
hist(S1, probability = TRUE)
curve(dnorm(x, mean = 0, sd = 1), add = TRUE)
set.seed(3023)
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = (runif(sim_number * n1) - mu)/sqrt(n1 * sigma_squared)
mat_temp1 = matrix(temp1, ncol = n1)
dim(mat_temp1)
set.seed(3023)
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = (runif(sim_number * n1) - mu)/sqrt(n1 * sigma_squared)
mat_temp1 = matrix(temp1, ncol = n1)
dim(mat_temp1)
S1 = apply(mate_temp1, 1, sum)
set.seed(3023)
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = (runif(sim_number * n1) - mu)/sqrt(n1 * sigma_squared)
mat_temp1 = matrix(temp1, ncol = n1)
dim(mat_temp1)
S1 = apply(mat_temp1, 1, sum)
set.seed(3023)
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = (runif(sim_number * n1) - mu)/sqrt(n1 * sigma_squared)
mat_temp1 = matrix(temp1, ncol = n1)
dim(mat_temp1)
S1 = apply(mat_temp1, 1, sum)
hist(S1, probability = TRUE)
set.seed(3023)
sim_number = 1000
n1 = 5
n2 = 100
mu = 1/2
sigma_squared = 1/12
# sample from the uniform distribution n1 times and repeat the experiment
# sim_number of times
temp1 = (runif(sim_number * n1) - mu)/sqrt(n1 * sigma_squared)
mat_temp1 = matrix(temp1, ncol = n1)
dim(mat_temp1)
S1 = apply(mat_temp1, 1, sum)
hist(S1, probability = TRUE)
curve(dnorm(x), add = TRUE)
?pchisq
pchisq(68, df = num_vars - 1, lower.tail = FALSE)
pnorm(68, mean = num_vars - 1, sd = sqrt(2*(num_vars - 1)), lower.tail = FALSE)
# Chunk 1
knitr::opts_chunk$set(
comment = '', fig.width = 5, fig.height = 4, fig.align = "center",
tidy = TRUE, size = "scriptsize"
)
library(latex2exp)
# Chunk 2
set.seed(3023)
num_sim = 100
num_rvs = 10
experiment = rnorm(n = num_sim * num_rvs, mean = 0, sd = 1)
data_mat = matrix(experiment, nrow = num_sim)
s2 = apply(data_mat, MARGIN = 1, FUN = var)
# Chunk 3
hist(s2 * (num_rvs - 1),
main = sprintf("Histogram of s^2 * (%d - 1)", num_rvs),
probability = TRUE,
xlab = sprintf("s^2 * (%d - 1)", num_rvs))
curve(dchisq(x, df = num_rvs - 1), add = TRUE)
# Chunk 4
set.seed(3023)
num_sim = 100
num_rvs = 60
experiment = rnorm(n = num_sim * num_rvs, mean = 0, sd = 1)
data_mat = matrix(experiment, nrow = num_sim)
s2 = apply(data_mat, MARGIN = 1, FUN = var)
hist(s2 * (num_rvs - 1),
main = sprintf("Histogram of s^2 * (n - 1)"),
probability = TRUE,
xlab = sprintf("s^2 * (%d - 1)", num_rvs),
breaks = 15)
curve(dchisq(x, df = num_rvs - 1),
add = TRUE,
col = "blue")
curve(dnorm(x, mean = num_rvs - 1, sd = sqrt(2*(num_rvs - 1))),
add = TRUE,
col = "red")
legend(x = "topright",
legend = c(expression(chi[n-1]^2), expression(N(n-1, 2(n-1)))),
col = c("red", "blue"),
lty = c(1,1),
cex = 0.8)
# Chunk 5
pchisq(68, df = num_vars - 1, lower.tail = FALSE)
pnorm(68, mean = num_vars - 1, sd = sqrt(2*(num_vars - 1)), lower.tail = FALSE)
pchisq(68, df = num_rvs - 1, lower.tail = FALSE)
pnorm(68, mean = num_rvs - 1, sd = sqrt(2*(num_rvs - 1)), lower.tail = FALSE)
?matrix
library(MASS)
set.seed(3023)
xy = mvrnorm(100, mu = c(2, 3), sigma = matrix(c(1, 1, 1, 4), nrow = 2))
?mvrnorm
library(MASS)
set.seed(3023)
xy = mvrnorm(100, mu = c(2, 3), Sigma = matrix(c(1, 1, 1, 4), nrow = 2))
xy
?hist
# Chunk 1
knitr::opts_chunk$set(
comment = '', fig.width = 5, fig.height = 4, fig.align = "center",
tidy = TRUE, size = "scriptsize"
)
library(latex2exp)
# Chunk 2
set.seed(3023)
num_sim = 100
num_rvs = 10
experiment = rnorm(n = num_sim * num_rvs, mean = 0, sd = 1)
data_mat = matrix(experiment, nrow = num_sim)
s2 = apply(data_mat, MARGIN = 1, FUN = var)
# Chunk 3
hist(s2 * (num_rvs - 1),
main = sprintf("Histogram of s^2 * (%d - 1)", num_rvs),
probability = TRUE,
xlab = sprintf("s^2 * (%d - 1)", num_rvs))
curve(dchisq(x, df = num_rvs - 1), add = TRUE)
# Chunk 4
set.seed(3023)
num_sim = 100
num_rvs = 60
experiment = rnorm(n = num_sim * num_rvs, mean = 0, sd = 1)
data_mat = matrix(experiment, nrow = num_sim)
s2 = apply(data_mat, MARGIN = 1, FUN = var)
hist(s2 * (num_rvs - 1),
main = sprintf("Histogram of s^2 * (n - 1)"),
probability = TRUE,
xlab = sprintf("s^2 * (%d - 1)", num_rvs),
breaks = 15)
curve(dchisq(x, df = num_rvs - 1),
add = TRUE,
col = "blue")
curve(dnorm(x, mean = num_rvs - 1, sd = sqrt(2*(num_rvs - 1))),
add = TRUE,
col = "red")
legend(x = "topright",
legend = c(expression(chi[n-1]^2), expression(N(n-1, 2(n-1)))),
col = c("red", "blue"),
lty = c(1,1),
cex = 0.8)
# Chunk 5
pchisq(68, df = num_rvs - 1, lower.tail = FALSE)
pnorm(68, mean = num_rvs - 1, sd = sqrt(2*(num_rvs - 1)), lower.tail = FALSE)
# Chunk 6
library(MASS)
set.seed(3023)
cov_matrix = matrix(c(1, 1, 1, 4), nrow = 2, ncol = 2)
cov_matrix
xy = mvrnorm(100, mu = c(2, 3), Sigma = cov_matrix)
x = xy[ , 1]
y = xy[ , 2]
# Chunk 7
hist(x, breaks = 15, probability = TRUE, main = "X")
library(MASS)
set.seed(3023)
cov_matrix = matrix(c(1, 1, 1, 4), nrow = 2, ncol = 2)
cov_matrix
xy = mvrnorm(100, mu = c(2, 3), Sigma = cov_matrix)
x = xy[ , 1]
y = xy[ , 2]
hist(x, breaks = 15, probability = TRUE, main = "X")
?matrix
cov_matrix
hist(x, probability = TRUE, main = "X")
?curve
hist(x, probability = TRUE, main = "X")
curve(dnorm(x, 2, 1), add = TRUE, col = "blue")
?par
# Chunk 1
knitr::opts_chunk$set(
comment = '', fig.width = 5, fig.height = 4, fig.align = "center",
tidy = TRUE, size = "scriptsize"
)
library(latex2exp)
# Chunk 2
set.seed(3023)
num_sim = 100
num_rvs = 10
experiment = rnorm(n = num_sim * num_rvs, mean = 0, sd = 1)
data_mat = matrix(experiment, nrow = num_sim)
s2 = apply(data_mat, MARGIN = 1, FUN = var)
# Chunk 3
hist(s2 * (num_rvs - 1),
main = sprintf("Histogram of s^2 * (%d - 1)", num_rvs),
probability = TRUE,
xlab = sprintf("s^2 * (%d - 1)", num_rvs))
curve(dchisq(x, df = num_rvs - 1), add = TRUE)
# Chunk 4
set.seed(3023)
num_sim = 100
num_rvs = 60
experiment = rnorm(n = num_sim * num_rvs, mean = 0, sd = 1)
data_mat = matrix(experiment, nrow = num_sim)
s2 = apply(data_mat, MARGIN = 1, FUN = var)
hist(s2 * (num_rvs - 1),
main = sprintf("Histogram of s^2 * (n - 1)"),
probability = TRUE,
xlab = sprintf("s^2 * (%d - 1)", num_rvs),
breaks = 15)
curve(dchisq(x, df = num_rvs - 1),
add = TRUE,
col = "blue")
curve(dnorm(x, mean = num_rvs - 1, sd = sqrt(2*(num_rvs - 1))),
add = TRUE,
col = "red")
legend(x = "topright",
legend = c(expression(chi[n-1]^2), expression(N(n-1, 2(n-1)))),
col = c("red", "blue"),
lty = c(1,1),
cex = 0.8)
# Chunk 5
pchisq(68, df = num_rvs - 1, lower.tail = FALSE)
pnorm(68, mean = num_rvs - 1, sd = sqrt(2*(num_rvs - 1)), lower.tail = FALSE)
# Chunk 6
library(MASS)
set.seed(3023)
cov_matrix = matrix(c(1, 1, 1, 4), nrow = 2, ncol = 2)
cov_matrix
xy = mvrnorm(100, mu = c(2, 3), Sigma = cov_matrix)
x = xy[ , 1]
y = xy[ , 2]
# Chunk 7
par(mfrow = c(1,2))
hist(x, probability = TRUE, main = "X")
curve(dnorm(x, mean = 2, sd = 1), add = TRUE, col = "blue")
hist(y, probability = TRUE, main = "Y")
curve(dnorm(x, mean = 3, sd = 2), add = TRUE, col = "red")
# Chunk 8
plot(x, y)
# Get sample correlation (theoretical correlation is 0.5)
cor(x, y)
?rexp
?min
n = 10
num_sim = 100
lambda = 1
mat_sim = matrix(rexp(n = num_sim, rate = lambda),
nrow = num_sim,
ncol = n)
simulate_mins = apply(mat_sim, MARGIN = 1, FUN = min)
length(simulate_mins)
n = 10
num_sim = 100
lambda = 1
mat_sim = matrix(rexp(n = num_sim, rate = lambda),
nrow = num_sim,
ncol = n)
simulate_mins = apply(mat_sim, MARGIN = 1, FUN = min)
?hist
?dexp
hist(x = simulate_mins, probability = TRUE,
xlab = "minimums",
ylab = "probability")
n = 10
num_sim = 100
lambda = 1
mat_sim = matrix(rexp(n = num_sim, rate = lambda),
nrow = num_sim,
ncol = n)
simulate_mins = apply(mat_sim, MARGIN = 1, FUN = min)
par(mfrow = c(1,1))
hist(x = simulate_mins, probability = TRUE,
xlab = "minimums",
ylab = "probability")
curve(dexp(x, rate = n), add = TRUE)
n = 10
num_sim = 100
lambda = 1
mat_sim = matrix(rexp(n = num_sim, rate = lambda),
nrow = num_sim,
ncol = n)
simulate_mins = apply(mat_sim, MARGIN = 1, FUN = min)
par(mfrow = c(1,1))
hist(x = simulate_mins, probability = TRUE,
xlab = "minimums",
ylab = "probability")
curve(dexp(x, rate = n), add = TRUE)
par(mfrow = c(1,1))
hist(x = simulate_mins, probability = TRUE,
xlab = "minimums",
ylab = "probability")
curve(dexp(x, rate = n), add = TRUE)
par(mfrow = c(1,1))
hist(x = simulate_mins, probability = TRUE,
xlab = "minimums",
ylab = "probability")
curve(dexp(x, rate = n), add = TRUE)
par(mfrow = c(1,1))
hist(x = simulate_mins, probability = TRUE,
xlab = "minimums",
ylab = "probability")
curve(dexp(x, rate = 1/n), add = TRUE)
par(mfrow = c(1,1))
hist(x = simulate_mins, probability = TRUE,
xlab = "minimums",
ylab = "probability")
curve(dexp(x, rate = n), add = TRUE)
?runif
?hist
?rt
?curve
t = rt(n = 100, df = 5)
f = t^2
hist(x = f, main = "t^2 distribution", probability = TRUE)
curve(df(x, df1=1, df2=5), add = TRUE, col = "red")
set.seed(2021)
t = rt(n = 100, df = 5)
f = t^2
hist(x = f, main = "t^2 distribution", probability = TRUE)
curve(df(x, df1=1, df2=5), add = TRUE, col = "red")
set.seed(2021)
t = rt(n = 100, df = 5)
f = t^2
hist(x = f, main = "t^2 distribution", probability = TRUE)
curve(df(x, df1=1, df2=5), add = TRUE, col = "red")
z = rbeta(100, shape1=2,shape2=1)
v = (2*z)/(4*(1-z))
hist(x = v, main = "100 samples from beta(2, 1)", probability = TRUE)
curve(df(x, df1=4, df2=2), add = TRUE, col = "green")
set.seed(2021)
z = rbeta(100, shape1=2,shape2=1)
v = (2*z)/(4*(1-z))
hist(x = v, main = "100 samples from beta(2, 1)", probability = TRUE)
curve(df(x, df1=4, df2=2), add = TRUE, col = "green")
set.seed(2021)
z = rbeta(100, shape1=2,shape2=1)
v = (2*z)/(4*(1-z))
hist(x = v, main = "100 samples from beta(2, 1)", probability = TRUE)
curve(df(x, df1=4, df2=2), add = TRUE, col = "green")
