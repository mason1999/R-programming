[91] 292.06 293.23 294.40 295.59 296.79 297.98 299.15 300.26 301.33 302.35 303.33 304.29 305.20 306.09 306.95
[106] 307.82 308.69 309.57 310.46 311.38 312.32 313.29 314.27 315.27 316.29 317.35 318.44 319.54 320.63 321.71
[121] 322.76 323.80 324.82 325.82 326.82 327.82 328.83 329.83 330.84 331.88 332.95 334.08 335.24 336.41 337.57
[136] 338.73 339.85 340.94 342.03 343.11 344.19 345.27 346.34 347.39 348.46 349.53 350.59 351.67 352.75 353.83
[151] 354.91 355.99 357.07 358.12 359.15 360.13 361.10 362.04 362.97 363.88 364.78 365.69 366.63 367.57 368.54
[166] 369.51 370.53 371.59 372.69 373.84 375.03 376.23 377.45 378.68 379.92 381.17 382.44 383.70 384.97 386.22
[181] 387.46 388.69 389.93 391.18 392.46 393.77 395.11 396.49 397.91 399.36 400.84 402.32 403.80 405.27 406.72
[196] 408.15 409.58 411.02 412.47 413.94'
data = recreate_vector(dat)
data
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
tidy = TRUE,
fig.width = 6,
fig.height = 6,
fig.align = "center")
recreate_vector = function(X, numeric = TRUE, quiet = FALSE){
X = scan(what = character(), text = X, quiet = quiet)
X = sub("^\\s*\\[\\d+\\]", "", X)
X = X[X != ""]
if(numeric) X <- as.numeric(X)
X
}
data = '[1] 218.45 218.98 219.48 219.96 220.42 220.90 221.40 221.94 222.54 223.21 223.93 224.67 225.44 226.19 226.95
[16] 227.73 228.53 229.36 230.21 231.08 231.96 232.82 233.66 234.52 235.38 236.26 237.16 238.06 238.96 239.86
[31] 240.74 241.59 242.42 243.25 244.06 244.86 245.63 246.40 247.16 247.96 248.78 249.65 250.53 251.42 252.32
[46] 253.24 254.18 255.12 256.06 256.97 257.86 258.72 259.55 260.35 261.13 261.88 262.60 263.29 263.95 264.57
[61] 265.17 265.74 266.29 266.85 267.41 267.98 268.57 269.20 269.87 270.59 271.37 272.21 273.09 273.98 274.88
[76] 275.78 276.69 277.61 278.54 279.51 280.52 281.58 282.70 283.86 285.04 286.23 287.41 288.58 289.74 290.89
[91] 292.06 293.23 294.40 295.59 296.79 297.98 299.15 300.26 301.33 302.35 303.33 304.29 305.20 306.09 306.95
[106] 307.82 308.69 309.57 310.46 311.38 312.32 313.29 314.27 315.27 316.29 317.35 318.44 319.54 320.63 321.71
[121] 322.76 323.80 324.82 325.82 326.82 327.82 328.83 329.83 330.84 331.88 332.95 334.08 335.24 336.41 337.57
[136] 338.73 339.85 340.94 342.03 343.11 344.19 345.27 346.34 347.39 348.46 349.53 350.59 351.67 352.75 353.83
[151] 354.91 355.99 357.07 358.12 359.15 360.13 361.10 362.04 362.97 363.88 364.78 365.69 366.63 367.57 368.54
[166] 369.51 370.53 371.59 372.69 373.84 375.03 376.23 377.45 378.68 379.92 381.17 382.44 383.70 384.97 386.22
[181] 387.46 388.69 389.93 391.18 392.46 393.77 395.11 396.49 397.91 399.36 400.84 402.32 403.80 405.27 406.72
[196] 408.15 409.58 411.02 412.47 413.94'
x = recreate_vector(data)
length(x)
ts.plot(x)
acf(x)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
tidy = TRUE,
fig.width = 6,
fig.height = 6,
fig.align = "center")
recreate_vector = function(X, numeric = TRUE, quiet = FALSE){
X = scan(what = character(), text = X, quiet = quiet)
X = sub("^\\s*\\[\\d+\\]", "", X)
X = X[X != ""]
if(numeric) X <- as.numeric(X)
X
}
data = '[1] 218.45 218.98 219.48 219.96 220.42 220.90 221.40 221.94 222.54 223.21 223.93 224.67 225.44 226.19 226.95
[16] 227.73 228.53 229.36 230.21 231.08 231.96 232.82 233.66 234.52 235.38 236.26 237.16 238.06 238.96 239.86
[31] 240.74 241.59 242.42 243.25 244.06 244.86 245.63 246.40 247.16 247.96 248.78 249.65 250.53 251.42 252.32
[46] 253.24 254.18 255.12 256.06 256.97 257.86 258.72 259.55 260.35 261.13 261.88 262.60 263.29 263.95 264.57
[61] 265.17 265.74 266.29 266.85 267.41 267.98 268.57 269.20 269.87 270.59 271.37 272.21 273.09 273.98 274.88
[76] 275.78 276.69 277.61 278.54 279.51 280.52 281.58 282.70 283.86 285.04 286.23 287.41 288.58 289.74 290.89
[91] 292.06 293.23 294.40 295.59 296.79 297.98 299.15 300.26 301.33 302.35 303.33 304.29 305.20 306.09 306.95
[106] 307.82 308.69 309.57 310.46 311.38 312.32 313.29 314.27 315.27 316.29 317.35 318.44 319.54 320.63 321.71
[121] 322.76 323.80 324.82 325.82 326.82 327.82 328.83 329.83 330.84 331.88 332.95 334.08 335.24 336.41 337.57
[136] 338.73 339.85 340.94 342.03 343.11 344.19 345.27 346.34 347.39 348.46 349.53 350.59 351.67 352.75 353.83
[151] 354.91 355.99 357.07 358.12 359.15 360.13 361.10 362.04 362.97 363.88 364.78 365.69 366.63 367.57 368.54
[166] 369.51 370.53 371.59 372.69 373.84 375.03 376.23 377.45 378.68 379.92 381.17 382.44 383.70 384.97 386.22
[181] 387.46 388.69 389.93 391.18 392.46 393.77 395.11 396.49 397.91 399.36 400.84 402.32 403.80 405.27 406.72
[196] 408.15 409.58 411.02 412.47 413.94'
x = recreate_vector(data)
length(x)
ts.plot(x)
acf(x)
par(mfrow = c(2, 1))
d1 = diff(x)
ts.plot(d1)
acf(d1)
par(mfrow = c(2, 1))
d1 = diff(x)
ts.plot(d1)
acf(d1)
par(mfrow = c(2, 1))
d2 = diff(diff(x))
ts.plot(d2)
acf(d2)
w = seq(-pi, pi, 0.1)
w = seq(-pi, pi, 0.1)
w = seq(-pi, pi, 0.1)
fw = ((1 + 0.7^2) + 1.4*cos(w)) * (1.5^2/(2*pi))
plot(w, fw, type = 'l', main = 'SDF of ARMA(0, 1)')
fit_ar1 = arima(x, order = c(1, 0, 0))
fit_ar1
names(fit_ar1)
var.coef(fit_ar1)
fit_ar1$var.coef
fit_ar1$var.coef[1, 1]
fit_ar1$var.coef[1, 1]^(0.5)
arima(x, order = c(1, 0, 0))
arima(x, order = c(2, 0, 0))
arima(x, order = c(3, 0, 0))
arima(d2, order = c(1, 0, 0))
arima(d2, order = c(2, 0, 0))
arima(d2, order = c(3, 0, 0))
arima(d2, order = c(0, 0, 3))
arima(d2, order = c(1, 0, 2))
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
tidy = TRUE,
fig.width = 6,
fig.height = 6,
fig.align = "center")
recreate_vector = function(X, numeric = TRUE, quiet = FALSE){
X = scan(what = character(), text = X, quiet = quiet)
X = sub("^\\s*\\[\\d+\\]", "", X)
X = X[X != ""]
if(numeric) X <- as.numeric(X)
X
}
data = '[1] 218.45 218.98 219.48 219.96 220.42 220.90 221.40 221.94 222.54 223.21 223.93 224.67 225.44 226.19 226.95
[16] 227.73 228.53 229.36 230.21 231.08 231.96 232.82 233.66 234.52 235.38 236.26 237.16 238.06 238.96 239.86
[31] 240.74 241.59 242.42 243.25 244.06 244.86 245.63 246.40 247.16 247.96 248.78 249.65 250.53 251.42 252.32
[46] 253.24 254.18 255.12 256.06 256.97 257.86 258.72 259.55 260.35 261.13 261.88 262.60 263.29 263.95 264.57
[61] 265.17 265.74 266.29 266.85 267.41 267.98 268.57 269.20 269.87 270.59 271.37 272.21 273.09 273.98 274.88
[76] 275.78 276.69 277.61 278.54 279.51 280.52 281.58 282.70 283.86 285.04 286.23 287.41 288.58 289.74 290.89
[91] 292.06 293.23 294.40 295.59 296.79 297.98 299.15 300.26 301.33 302.35 303.33 304.29 305.20 306.09 306.95
[106] 307.82 308.69 309.57 310.46 311.38 312.32 313.29 314.27 315.27 316.29 317.35 318.44 319.54 320.63 321.71
[121] 322.76 323.80 324.82 325.82 326.82 327.82 328.83 329.83 330.84 331.88 332.95 334.08 335.24 336.41 337.57
[136] 338.73 339.85 340.94 342.03 343.11 344.19 345.27 346.34 347.39 348.46 349.53 350.59 351.67 352.75 353.83
[151] 354.91 355.99 357.07 358.12 359.15 360.13 361.10 362.04 362.97 363.88 364.78 365.69 366.63 367.57 368.54
[166] 369.51 370.53 371.59 372.69 373.84 375.03 376.23 377.45 378.68 379.92 381.17 382.44 383.70 384.97 386.22
[181] 387.46 388.69 389.93 391.18 392.46 393.77 395.11 396.49 397.91 399.36 400.84 402.32 403.80 405.27 406.72
[196] 408.15 409.58 411.02 412.47 413.94'
x = recreate_vector(data)
length(x)
ts.plot(x)
acf(x)
par(mfrow = c(2, 1))
d1 = diff(x)
ts.plot(d1)
acf(d1)
par(mfrow = c(2, 1))
d2 = diff(diff(x))
ts.plot(d2)
acf(d2)
w = seq(-pi, pi, 0.1)
fw = ((1 + 0.7^2) + 1.4*cos(w)) * (1.5^2/(2*pi))
plot(w, fw, type = 'l', main = 'SDF of ARMA(0, 1)')
arima(d2, order = c(1, 0, 0))
arima(d2, order = c(2, 0, 0))
arima(d2, order = c(3, 0, 0))
arima(d2, order = c(0, 0, 3))
arima(d2, order = c(1, 0, 2))
tsdiag(fit_ar1)
tsdiag(fit_ar2)
fit_ar1 = arima(d2, order = c(1, 0, 0))
fit_ar2 = arima(d2, order = c(2, 0, 0))
fit_ar3 = arima(d2, order = c(3, 0, 0))
fit_ma3 = arima(d2, order = c(0, 0, 3))
fit_arma12 = arima(d2, order = c(1, 0, 2))
tsdiag(fit_ar1)
tsdiag(fit_ar2)
tsdiag(fit_ar3)
tsdiag(fit_ma3)
tsdiag(fit_arma12)
forecast = predict(fit_arma12, n.ahead = 5, se.fit = TRUE)
forecast
?rnorm
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
tidy = TRUE,
fig.width = 6,
fig.height = 6,
fig.align = "center")
# (i)
z = rnorm(n = 1000)[701:1000]
# (ii)
ts.plot(z)
acf(z)
pacf(z)
# (ii)
par(mfrow = c(3, 1))
ts.plot(z)
acf(z)
pacf(z)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
tidy = TRUE,
fig.width = 6,
fig.height = 6,
fig.align = "center")
recreate_vector = function(X, numeric = TRUE, quiet = FALSE){
X = scan(what = character(), text = X, quiet = quiet)
X = sub("^\\s*\\[\\d+\\]", "", X)
X = X[X != ""]
if(numeric) X <- as.numeric(X)
X
}
# (i)
z = rnorm(n = 1000)[701:1000]
# (ii)
par(mfrow = c(3, 1))
ts.plot(z)
acf(z)
pacf(z)
# (iii)
library(astsa)
spectrum(z)
# (iv)
x1 = 1 + 2*701:1000 + z
arma.spec(ar = c(0.6))
arima.sim
?arima.sim
d = arima.sim(list(ar = 0.6), n = 500)[301:500]
d
spectrum(d)
spectrum(arima.sim(list(ar = -0.6), n = 500)[301:500])
spectrum(arima.sim(list(ar = 0.99), n = 500)[301:500])
spectrum(arima.sim(list(ar = 0.99), n = 500)[301:500])
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
tidy = TRUE,
fig.width = 6,
fig.height = 6,
fig.align = "center")
recreate_vector = function(X, numeric = TRUE, quiet = FALSE){
X = scan(what = character(), text = X, quiet = quiet)
X = sub("^\\s*\\[\\d+\\]", "", X)
X = X[X != ""]
if(numeric) X <- as.numeric(X)
X
}
library(fracdfiff)
?fracdiff.sim
??fracdiff.sim
?fracdiff::fracdiff.sim
library(fracdiff)
s = fracdiff.sim(n = 1300, ar = 0.7, ma = 0.4)$series[301:1300]
s = fracdiff.sim(n = 1300, ar = 0.7, ma = 0.4, d = 0.35)$series[301:1300]
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
tidy = TRUE,
fig.width = 6,
fig.height = 6,
fig.align = "center")
ts.plot(s)
acf(s)
pacf(s)
spectrum(s)
?fracdiff
fit_arfima_1d1 = fracdiff(s, nar = 1, nma = 1)
fir_arfima_1d1
fit_arfima_1d1
fit_arfima_1d1$stderror.dpq
?garch.sim
?astsa::garch.sim
??garch.sim
install.packages(
'TSA')
?TSA::garch.sim
library(TSA)
library(TSA)
d1 = garch.sim(alpha = c(0.7, 0.4), n = 1000)[201:1000]
ts.plot(d1)
acf(d1)
pacf(d1)
scan()
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
tidy = TRUE,
fig.width = 6,
fig.height = 6,
fig.align = "center")
recreate_vector = function(X, numeric = TRUE, quiet = FALSE){
X = scan(what = character(), text = X, quiet = quiet)
X = sub("^\\s*\\[\\d+\\]", "", X)
X = X[X != ""]
if(numeric) X <- as.numeric(X)
X
}
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
tidy = TRUE,
fig.width = 6,
fig.height = 6,
fig.align = "center")
recreate_vector = function(X, numeric = TRUE, quiet = FALSE){
X = scan(what = character(), text = X, quiet = quiet)
X = sub("^\\s*\\[\\d+\\]", "", X)
X = X[X != ""]
if(numeric) X <- as.numeric(X)
X
}
# the data in text form:
textual_data = '[1] 12.43 11.51 10.04 11.21 11.56 11.20 11.11 10.92 10.40  9.25  9.85 12.97 13.71 14.04 13.39 13.05 12.34 12.86
[19] 14.31 14.20 13.63 15.64 14.83 12.26 11.51 11.29 12.07 13.80 15.53 14.66 14.54 17.25 16.37 14.43 12.95 12.09
[37] 10.98 11.70 12.99 14.08 13.75 11.78 12.05 13.55 14.72 13.44 14.56 16.17 14.84 13.32 13.75 15.12 16.09 14.07
[55] 13.33 14.93 16.20 15.00 13.32 12.45 12.51 12.89 13.66 13.42 15.02 15.48 15.11 13.96 13.93 14.42 14.14 13.62
[73] 14.09 12.96 13.66 14.14 13.24 14.33 15.92 13.96 12.52 11.43 11.77 14.91 15.44 15.48 15.08 16.23 15.97 14.28
[91] 12.52 13.19 14.32 14.90 15.13 13.65 12.88 11.65 11.13 12.04 14.72 15.22 14.61 14.35 14.41 15.49 14.32 12.97
[109] 12.83 11.50 11.02 11.24 11.26 13.54 15.57 15.21 14.34 12.21 11.17 13.65'
data = recreate_vector(textual_data)
?arima
?arima
fit_ma2 = arima(data, order = c(0, 0, 2))
fit_ma2
forecast = predict(fit_ma2, n.ahead = 5, se.fit = TRUE)
forecast
forecast = predict(fit_ma2, n.ahead = 5, se.fit = TRUE)
forecast$pred
forecast$pred
forecast$se
forecast$se[1]
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
tidy = TRUE,
fig.width = 6,
fig.height = 6,
fig.align = "center")
recreate_vector = function(X, numeric = TRUE, quiet = FALSE){
X = scan(what = character(), text = X, quiet = quiet)
X = sub("^\\s*\\[\\d+\\]", "", X)
X = X[X != ""]
if(numeric) X <- as.numeric(X)
X
}
# the data in text form:
textual_data = '[1] 12.43 11.51 10.04 11.21 11.56 11.20 11.11 10.92 10.40  9.25  9.85 12.97 13.71 14.04 13.39 13.05 12.34 12.86
[19] 14.31 14.20 13.63 15.64 14.83 12.26 11.51 11.29 12.07 13.80 15.53 14.66 14.54 17.25 16.37 14.43 12.95 12.09
[37] 10.98 11.70 12.99 14.08 13.75 11.78 12.05 13.55 14.72 13.44 14.56 16.17 14.84 13.32 13.75 15.12 16.09 14.07
[55] 13.33 14.93 16.20 15.00 13.32 12.45 12.51 12.89 13.66 13.42 15.02 15.48 15.11 13.96 13.93 14.42 14.14 13.62
[73] 14.09 12.96 13.66 14.14 13.24 14.33 15.92 13.96 12.52 11.43 11.77 14.91 15.44 15.48 15.08 16.23 15.97 14.28
[91] 12.52 13.19 14.32 14.90 15.13 13.65 12.88 11.65 11.13 12.04 14.72 15.22 14.61 14.35 14.41 15.49 14.32 12.97
[109] 12.83 11.50 11.02 11.24 11.26 13.54 15.57 15.21 14.34 12.21 11.17 13.65'
data = recreate_vector(textual_data)
length(data)
fit_ma2 = arima(data, order = c(0, 0, 2))
fit_ma2
forecast = predict(fit_ma2, n.ahead = 5, se.fit = TRUE)
pred = forecast$pred
pred
stderrors = forecast$se
stderrors
plot(121:125, pred, xlab = "time", ylab = "lag-2 of data")
arrows(x0=121:125, y0 = pred - 2 * stderrors, x1=121:125, y1=pred + 2 * stderrors, code=3, angle=90, length=0.05, col = "blue")
plot(121:125, pred, xlab = "time", ylab = "lag-2 of data")
arrows(x0=121:125, y0 = pred - 2 * stderrors, x1=121:125, y1=pred + 2 * stderrors, code=3, angle=90, length=0.05, col = "blue")
legend(x=121,y=0.06, "prediction intervals" ,cex=.8, col = "blue", pch=c(1,1))
plot(121:125, pred, xlab = "time", ylab = "lag-2 of data")
arrows(x0=121:125, y0 = pred - 2 * stderrors, x1=121:125, y1=pred + 2 * stderrors, code=3, angle=90, length=0.05, col = "blue")
legend(x=121,y=0.06, "prediction intervals" ,cex=.8, col = "blue", pch=c(1,1))
121:125
plot(121:125, pred, ylim = c(-0.06, 0.06), xlab = "time", ylab = "lag-2 of data")
plot(121:125, pred, xlab = "time", ylab = "lag-2 of data")
plot(121:125, pred, ylim = c(10, 16) xlab = "time", ylab = "lag-2 of data")
plot(121:125, pred, ylim = c(10, 16), xlab = "time", ylab = "lag-2 of data")
arrows(x0=121:125, y0 = pred - 1.96 * stderrors, x1=121:125, y1 = pred - 1.96 * stderrors, code=3, angle=90, length=0.05, col = "blue")
plot(121:125, pred, ylim = c(10, 16), xlab = "time", ylab = "lag-2 of data")
arrows(x0=121:125, y0 = pred - 1.96 * stderrors, x1=121:125, y1 = pred - 1.96 * stderrors, code=3, angle=90, length=0.05, col = "blue")
plot(121:125, pred, xlab = "time", ylab = "lag-2 of data")
arrows(x0=121:125, y0 = pred - 2 * stderrors, x1=121:125, y1=pred + 2 * stderrors, code=3, angle=90, length=0.05, col = "blue")
plot(121:125, pred, ylim = c(10, 16), xlab = "time", ylab = "lag-2 of data")
arrows(x0=121:125, y0 = pred - 2 * stderrors, x1=121:125, y1=pred + 2 * stderrors, code=3, angle=90, length=0.05, col = "blue")
plot.new()
plot(121:125, pred, ylim = c(10, 16), xlab = "time", ylab = "lag-2 of data")
arrows(x0=121:125, y0 = pred - 2 * stderrors, x1=121:125, y1=pred + 2 * stderrors, code=3, angle=90, length=0.05, col = "blue")
plot.new(121:125, pred, ylim = c(10, 16), xlab = "time", ylab = "lag-2 of data")
library(astsa)
arma.spec(ma = c(-0.6, 0.6, 0.4))
?arima.sim
set.seed(341)
d4 = arima.sim(list(ma = c(-0.6, 0.6, 0.4)), n = 600)[401:600]
spectrum(d4)
x = spectrum(d4)
x
x = arma.spec(ma = c(-0.6, 0.6, 0.4))
x
arma.spec(ar = 0.4, ma = c(-0.5, 0.7))
arma.spec(ar = 0.4, ma = c(-0.5, 0.7))
w = seq(0.0001, pi, by = 0.001)
w = seq(0.0001, pi, by = 0.001)
fw = 1/(2*pi) * (1.25 + cos(w))/(1.49 - 1.4 * cos(w)) * 1/(2*sin(w/2))^(0.6)
?plot
?plot
w = seq(0.0001, pi, by = 0.001)
fw = 1/(2*pi) * (1.25 + cos(w))/(1.49 - 1.4 * cos(w)) * 1/(2*sin(w/2))^(0.6)
plot(w, fw, type = 'l')
?fracdiff.sim
set.seed(1205)
arfima_data = fracdiff.sim(n = 1200, ar =  c(0.3, -0.7), ma = c(0.4, -0.6))
arfima_data = fracdiff.sim(n = 1200, ar =  c(0.3, -0.7), ma = c(0.4, -0.6), d = 0.4)
arfima_data = fracdiff.sim(n = 1200, ar =  c(0.3, -0.7), ma = c(0.4, -0.6), d = 0.4)
ts_data = arfima_data$series
acf_vals = acf(ts_data)
pacf_vals = pacf(ts_data)
acf_vals
pacf_vals
acf_vals[1:5]
pacf_vals[1:5]
spec_values = spectrum(ts_data)
spec_values
spec_values = spectrum(ts_data)
spec_values$spec[1:5]
set.seed(8134)
arfima_data2 = fracdiff.sim(n = 1500, ar =  0.4, ma = -0.6, d = 0.4)
?fracdiff
fit = fracdiff(d8, nar = 1, nma = 1)
d8 = arfima_data2$series[301:1500]
fit = fracdiff(d8, nar = 1, nma = 1)
fit
fit$stderror.dpq
fit
fit$stderror.dpq
set.seed(1456)
library(TSA)
?TSA::garch.sim
simulate_vals = garch.sim(alpha = c(0.58, 0.3), beta = 0.4, n = 1800)
acf(d9_squared)
d9_squared = d9^2
acf(d9_squared)
pacf(d9_squared)
d9_squared = d9^2
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
tidy = TRUE,
fig.width = 6,
fig.height = 6,
fig.align = "center")
recreate_vector = function(X, numeric = TRUE, quiet = FALSE){
X = scan(what = character(), text = X, quiet = quiet)
X = sub("^\\s*\\[\\d+\\]", "", X)
X = X[X != ""]
if(numeric) X <- as.numeric(X)
X
}
# the data in text form:
textual_data = '[1] 12.43 11.51 10.04 11.21 11.56 11.20 11.11 10.92 10.40  9.25  9.85 12.97 13.71 14.04 13.39 13.05 12.34 12.86
[19] 14.31 14.20 13.63 15.64 14.83 12.26 11.51 11.29 12.07 13.80 15.53 14.66 14.54 17.25 16.37 14.43 12.95 12.09
[37] 10.98 11.70 12.99 14.08 13.75 11.78 12.05 13.55 14.72 13.44 14.56 16.17 14.84 13.32 13.75 15.12 16.09 14.07
[55] 13.33 14.93 16.20 15.00 13.32 12.45 12.51 12.89 13.66 13.42 15.02 15.48 15.11 13.96 13.93 14.42 14.14 13.62
[73] 14.09 12.96 13.66 14.14 13.24 14.33 15.92 13.96 12.52 11.43 11.77 14.91 15.44 15.48 15.08 16.23 15.97 14.28
[91] 12.52 13.19 14.32 14.90 15.13 13.65 12.88 11.65 11.13 12.04 14.72 15.22 14.61 14.35 14.41 15.49 14.32 12.97
[109] 12.83 11.50 11.02 11.24 11.26 13.54 15.57 15.21 14.34 12.21 11.17 13.65'
data = recreate_vector(textual_data)
length(data)
fit_ma2 = arima(data, order = c(0, 0, 2))
fit_ma2
forecast = predict(fit_ma2, n.ahead = 5, se.fit = TRUE)
pred = forecast$pred
pred
stderrors = forecast$se
stderrors
plot(121:125, pred, ylim = c(8, 17), xlab = "time", ylab = "weekly profit", main = "weekly profit vs time")
arrows(x0=121:125, y0 = pred - 2 * stderrors, x1=121:125, y1=pred + 2 * stderrors, code=3, angle=90, length=0.05, col = "blue")
legend(x=121,y=0.06, "prediction intervals" ,cex=.8, col = "blue", pch=c(1,1))
library(astsa)
arma.spec(ma = c(-0.6, 0.6, 0.4))
set.seed(341)
d4 = arima.sim(list(ma = c(-0.6, 0.6, 0.4)), n = 600)[401:600]
spectrum(d4)
arma.spec(ar = 0.4, ma = c(-0.5, 0.7))
w = seq(0.0001, pi, by = 0.001)
fw = 1/(2*pi) * (1.25 + cos(w))/(1.49 - 1.4 * cos(w)) * 1/(2*sin(w/2))^(0.6)
plot(w, fw, type = 'l')
library(fracdiff)
set.seed(1205)
arfima_data = fracdiff.sim(n = 1200, ar =  c(0.3, -0.7), ma = c(0.4, -0.6), d = 0.4)
ts_data = arfima_data$series
acf_vals = acf(ts_data)
pacf_vals = pacf(ts_data)
acf_vals[1:5]
pacf_vals[1:5]
spec_values = spectrum(ts_data)
spec_values$spec[1:5]
set.seed(8134)
arfima_data2 = fracdiff.sim(n = 1500, ar =  0.4, ma = -0.6, d = 0.4)
d8 = arfima_data2$series[301:1500]
fit = fracdiff(d8, nar = 1, nma = 1)
fit
fit$stderror.dpq
set.seed(1456)
library(TSA)
simulate_vals = garch.sim(alpha = c(0.58, 0.3), beta = 0.4, n = 1800)
d9 = simulate_vals[401:1800]
acf_vals = acf(d9)
pacf_vals = pacf(d9)
acf_vals[1:3]
pacf_vals[1:3]
d9_squared = d9^2
acf(d9_squared)
pacf(d9_squared)
